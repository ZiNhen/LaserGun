
LaserGun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005400  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080082cc  080082cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082cc  080082cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000010  080082e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080082e4  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af7a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001adb  00000000  00000000  0002aff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a04  00000000  00000000  0002d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d13  00000000  00000000  0002e194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e687  00000000  00000000  00044ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d5c  00000000  00000000  0005352e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035f4  00000000  00000000  000da28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000dd880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002eb4 	.word	0x08002eb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002eb4 	.word	0x08002eb4

0800014c <PlaySound>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Kich hoat am thanh
void PlaySound(const uint8_t audio_data[],const uint32_t audio_length)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	HAL_DMA_Abort_IT(&hdma_tim3_ch4_up);
 8000156:	4809      	ldr	r0, [pc, #36]	; (800017c <PlaySound+0x30>)
 8000158:	f000 ff5c 	bl	8001014 <HAL_DMA_Abort_IT>
	HAL_DMA_Start_IT(&hdma_tim3_ch4_up,(uint32_t)(audio_data+44),(uint32_t)&(TIM2->CCR1), audio_length);
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	332c      	adds	r3, #44	; 0x2c
 8000160:	4619      	mov	r1, r3
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <PlaySound+0x34>)
 8000166:	4805      	ldr	r0, [pc, #20]	; (800017c <PlaySound+0x30>)
 8000168:	f000 fef4 	bl	8000f54 <HAL_DMA_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <PlaySound+0x38>)
 800016e:	f002 f873 	bl	8002258 <HAL_TIM_Base_Start>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000158 	.word	0x20000158
 8000180:	40000034 	.word	0x40000034
 8000184:	20000110 	.word	0x20000110

08000188 <Timer_Delay_ms>:
    	HAL_TIM_Base_Stop(&htim3);
    }
}

//Ham delay bang timer 1
void Timer_Delay_ms(uint16_t ms) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000192:	4b0e      	ldr	r3, [pc, #56]	; (80001cc <Timer_Delay_ms+0x44>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2200      	movs	r2, #0
 8000198:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_AUTORELOAD(&htim1, ms);// Reset counter
 800019a:	4b0c      	ldr	r3, [pc, #48]	; (80001cc <Timer_Delay_ms+0x44>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	88fa      	ldrh	r2, [r7, #6]
 80001a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80001a2:	88fb      	ldrh	r3, [r7, #6]
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <Timer_Delay_ms+0x44>)
 80001a6:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start(&htim1);        // Bắt đầu timer
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <Timer_Delay_ms+0x44>)
 80001aa:	f002 f855 	bl	8002258 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim1) < ms);
 80001ae:	bf00      	nop
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <Timer_Delay_ms+0x44>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001b6:	88fb      	ldrh	r3, [r7, #6]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d3f9      	bcc.n	80001b0 <Timer_Delay_ms+0x28>
    HAL_TIM_Base_Stop(&htim1);         // Dừng timer sau khi xong
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <Timer_Delay_ms+0x44>)
 80001be:	f002 f895 	bl	80022ec <HAL_TIM_Base_Stop>
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000080 	.word	0x20000080

080001d0 <vibrate>:

//Ham tao rung
void vibrate(int ms){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_TogglePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin);
 80001d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001dc:	4808      	ldr	r0, [pc, #32]	; (8000200 <vibrate+0x30>)
 80001de:	f001 fa78 	bl	80016d2 <HAL_GPIO_TogglePin>
	  Timer_Delay_ms(ms);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	b29b      	uxth	r3, r3
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffce 	bl	8000188 <Timer_Delay_ms>
	  HAL_GPIO_TogglePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin);
 80001ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <vibrate+0x30>)
 80001f2:	f001 fa6e 	bl	80016d2 <HAL_GPIO_TogglePin>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40010c00 	.word	0x40010c00

08000204 <HAL_GPIO_EXTI_Callback>:

//Ham ngat khi nhan nut
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LASER_TRIGGER_Pin){
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000214:	f040 8098 	bne.w	8000348 <HAL_GPIO_EXTI_Callback+0x144>
		if(!out_of_ammo){
 8000218:	4b66      	ldr	r3, [pc, #408]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	f083 0301 	eor.w	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	2b00      	cmp	r3, #0
 8000224:	f000 80c2 	beq.w	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
			switch (mode){
 8000228:	4b63      	ldr	r3, [pc, #396]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b02      	cmp	r3, #2
 800022e:	d05b      	beq.n	80002e8 <HAL_GPIO_EXTI_Callback+0xe4>
 8000230:	2b02      	cmp	r3, #2
 8000232:	f300 80bb 	bgt.w	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
 8000236:	2b00      	cmp	r3, #0
 8000238:	d002      	beq.n	8000240 <HAL_GPIO_EXTI_Callback+0x3c>
 800023a:	2b01      	cmp	r3, #1
 800023c:	d04b      	beq.n	80002d6 <HAL_GPIO_EXTI_Callback+0xd2>
		}
	}
	else{
		__NOP();
	}
}
 800023e:	e0b5      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
				  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 8000240:	2102      	movs	r1, #2
 8000242:	485e      	ldr	r0, [pc, #376]	; (80003bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000244:	f001 fa45 	bl	80016d2 <HAL_GPIO_TogglePin>
				  PlaySound(shoot_sound, shoot_sound_length);
 8000248:	f241 7318 	movw	r3, #5912	; 0x1718
 800024c:	4619      	mov	r1, r3
 800024e:	485c      	ldr	r0, [pc, #368]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000250:	f7ff ff7c 	bl	800014c <PlaySound>
				  vibrate(50);
 8000254:	2032      	movs	r0, #50	; 0x32
 8000256:	f7ff ffbb 	bl	80001d0 <vibrate>
				  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 800025a:	2102      	movs	r1, #2
 800025c:	4857      	ldr	r0, [pc, #348]	; (80003bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 800025e:	f001 fa38 	bl	80016d2 <HAL_GPIO_TogglePin>
				  if (--bullets == 0){
 8000262:	4b58      	ldr	r3, [pc, #352]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3b01      	subs	r3, #1
 8000268:	4a56      	ldr	r2, [pc, #344]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800026a:	6013      	str	r3, [r2, #0]
 800026c:	4b55      	ldr	r3, [pc, #340]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	f040 809a 	bne.w	80003aa <HAL_GPIO_EXTI_Callback+0x1a6>
					  out_of_ammo = true;
 8000276:	4b4f      	ldr	r3, [pc, #316]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_TogglePin(OUT_OF_AMMO_GPIO_Port, OUT_OF_AMMO_Pin);
 800027c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000280:	4851      	ldr	r0, [pc, #324]	; (80003c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000282:	f001 fa26 	bl	80016d2 <HAL_GPIO_TogglePin>
				  break;
 8000286:	e090      	b.n	80003aa <HAL_GPIO_EXTI_Callback+0x1a6>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 8000288:	2102      	movs	r1, #2
 800028a:	484c      	ldr	r0, [pc, #304]	; (80003bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 800028c:	f001 fa21 	bl	80016d2 <HAL_GPIO_TogglePin>
					  PlaySound(shoot_sound, shoot_sound_length);
 8000290:	f241 7318 	movw	r3, #5912	; 0x1718
 8000294:	4619      	mov	r1, r3
 8000296:	484a      	ldr	r0, [pc, #296]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000298:	f7ff ff58 	bl	800014c <PlaySound>
					  vibrate(50);
 800029c:	2032      	movs	r0, #50	; 0x32
 800029e:	f7ff ff97 	bl	80001d0 <vibrate>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 80002a2:	2102      	movs	r1, #2
 80002a4:	4845      	ldr	r0, [pc, #276]	; (80003bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 80002a6:	f001 fa14 	bl	80016d2 <HAL_GPIO_TogglePin>
					  Timer_Delay_ms(50);
 80002aa:	2032      	movs	r0, #50	; 0x32
 80002ac:	f7ff ff6c 	bl	8000188 <Timer_Delay_ms>
					  if (--bullets == 0){
 80002b0:	4b44      	ldr	r3, [pc, #272]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	4a43      	ldr	r2, [pc, #268]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80002b8:	6013      	str	r3, [r2, #0]
 80002ba:	4b42      	ldr	r3, [pc, #264]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d109      	bne.n	80002d6 <HAL_GPIO_EXTI_Callback+0xd2>
						  out_of_ammo = true;
 80002c2:	4b3c      	ldr	r3, [pc, #240]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
						  HAL_GPIO_TogglePin(OUT_OF_AMMO_GPIO_Port, OUT_OF_AMMO_Pin);
 80002c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002cc:	483e      	ldr	r0, [pc, #248]	; (80003c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80002ce:	f001 fa00 	bl	80016d2 <HAL_GPIO_TogglePin>
						  break;
 80002d2:	bf00      	nop
				  break;
 80002d4:	e06a      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
				  while(HAL_GPIO_ReadPin(LASER_TRIGGER_GPIO_Port, LASER_TRIGGER_Pin) == 1){
 80002d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002da:	483c      	ldr	r0, [pc, #240]	; (80003cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 80002dc:	f001 f9ca 	bl	8001674 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d0d0      	beq.n	8000288 <HAL_GPIO_EXTI_Callback+0x84>
				  break;
 80002e6:	e061      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
				  for (int i = 0; i < 3; i++){
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	e028      	b.n	8000340 <HAL_GPIO_EXTI_Callback+0x13c>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 80002ee:	2102      	movs	r1, #2
 80002f0:	4832      	ldr	r0, [pc, #200]	; (80003bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 80002f2:	f001 f9ee 	bl	80016d2 <HAL_GPIO_TogglePin>
					  PlaySound(shoot_sound, shoot_sound_length);
 80002f6:	f241 7318 	movw	r3, #5912	; 0x1718
 80002fa:	4619      	mov	r1, r3
 80002fc:	4830      	ldr	r0, [pc, #192]	; (80003c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80002fe:	f7ff ff25 	bl	800014c <PlaySound>
					  vibrate(50);
 8000302:	2032      	movs	r0, #50	; 0x32
 8000304:	f7ff ff64 	bl	80001d0 <vibrate>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 8000308:	2102      	movs	r1, #2
 800030a:	482c      	ldr	r0, [pc, #176]	; (80003bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 800030c:	f001 f9e1 	bl	80016d2 <HAL_GPIO_TogglePin>
					  Timer_Delay_ms(50);
 8000310:	2032      	movs	r0, #50	; 0x32
 8000312:	f7ff ff39 	bl	8000188 <Timer_Delay_ms>
					  if (--bullets == 0){
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3b01      	subs	r3, #1
 800031c:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800031e:	6013      	str	r3, [r2, #0]
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d108      	bne.n	800033a <HAL_GPIO_EXTI_Callback+0x136>
						  out_of_ammo = true;
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
						  HAL_GPIO_TogglePin(OUT_OF_AMMO_GPIO_Port, OUT_OF_AMMO_Pin);
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4825      	ldr	r0, [pc, #148]	; (80003c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000334:	f001 f9cd 	bl	80016d2 <HAL_GPIO_TogglePin>
						  break;
 8000338:	e038      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
				  for (int i = 0; i < 3; i++){
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3301      	adds	r3, #1
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2b02      	cmp	r3, #2
 8000344:	ddd3      	ble.n	80002ee <HAL_GPIO_EXTI_Callback+0xea>
}
 8000346:	e031      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
	else if (GPIO_Pin == MODE_TRIGGER_Pin){
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800034e:	d10c      	bne.n	800036a <HAL_GPIO_EXTI_Callback+0x166>
		  mode++;
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	4a18      	ldr	r2, [pc, #96]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000358:	6013      	str	r3, [r2, #0]
		  if (mode > 2) mode = 0;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b02      	cmp	r3, #2
 8000360:	dd24      	ble.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	e020      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
	else if (GPIO_Pin == RELOAD_TRIGGER_Pin){
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000370:	d119      	bne.n	80003a6 <HAL_GPIO_EXTI_Callback+0x1a2>
		if (out_of_ammo){
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d018      	beq.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
			bullets = 30;
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800037c:	221e      	movs	r2, #30
 800037e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(OUT_OF_AMMO_GPIO_Port, OUT_OF_AMMO_Pin);
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	4810      	ldr	r0, [pc, #64]	; (80003c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000386:	f001 f9a4 	bl	80016d2 <HAL_GPIO_TogglePin>
			out_of_ammo = false;
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
			PlaySound(reload_sound, reload_sound_length);
 8000390:	f643 43ba 	movw	r3, #15546	; 0x3cba
 8000394:	4619      	mov	r1, r3
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000398:	f7ff fed8 	bl	800014c <PlaySound>
			vibrate(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a0:	f7ff ff16 	bl	80001d0 <vibrate>
}
 80003a4:	e002      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
		__NOP();
 80003a6:	bf00      	nop
}
 80003a8:	e000      	b.n	80003ac <HAL_GPIO_EXTI_Callback+0x1a8>
				  break;
 80003aa:	bf00      	nop
}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200001a0 	.word	0x200001a0
 80003b8:	2000019c 	.word	0x2000019c
 80003bc:	40010800 	.word	0x40010800
 80003c0:	08002ecc 	.word	0x08002ecc
 80003c4:	20000000 	.word	0x20000000
 80003c8:	40011000 	.word	0x40011000
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	080045e4 	.word	0x080045e4

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d8:	f000 fbf2 	bl	8000bc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003dc:	f000 f80d 	bl	80003fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e0:	f000 f9b2 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 80003e4:	f000 f992 	bl	800070c <MX_DMA_Init>
  MX_TIM1_Init();
 80003e8:	f000 f872 	bl	80004d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003ec:	f000 f8c2 	bl	8000574 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003f0:	f000 f938 	bl	8000664 <MX_TIM3_Init>
  MX_I2C2_Init();
 80003f4:	f000 f83e 	bl	8000474 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <main+0x24>

080003fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b090      	sub	sp, #64	; 0x40
 80003fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	2228      	movs	r2, #40	; 0x28
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f002 fd27 	bl	8002e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041c:	2302      	movs	r3, #2
 800041e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	2301      	movs	r3, #1
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	2310      	movs	r3, #16
 8000426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000428:	2300      	movs	r3, #0
 800042a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fac3 	bl	80019bc <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800043c:	f000 fa1e 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fd30 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000466:	f000 fa09 	bl	800087c <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	; 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_I2C2_Init+0x50>)
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <MX_I2C2_Init+0x54>)
 800047c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_I2C2_Init+0x50>)
 8000480:	4a12      	ldr	r2, [pc, #72]	; (80004cc <MX_I2C2_Init+0x58>)
 8000482:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_I2C2_Init+0x50>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_I2C2_Init+0x50>)
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_I2C2_Init+0x50>)
 8000492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000496:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <MX_I2C2_Init+0x50>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_I2C2_Init+0x50>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <MX_I2C2_Init+0x50>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_I2C2_Init+0x50>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_I2C2_Init+0x50>)
 80004b2:	f001 f93f 	bl	8001734 <HAL_I2C_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004bc:	f000 f9de 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000002c 	.word	0x2000002c
 80004c8:	40005800 	.word	0x40005800
 80004cc:	00061a80 	.word	0x00061a80

080004d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <MX_TIM1_Init+0x9c>)
 80004ee:	4a20      	ldr	r2, [pc, #128]	; (8000570 <MX_TIM1_Init+0xa0>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_TIM1_Init+0x9c>)
 80004f4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_TIM1_Init+0x9c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_TIM1_Init+0x9c>)
 8000502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000506:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_TIM1_Init+0x9c>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_TIM1_Init+0x9c>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_TIM1_Init+0x9c>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800051a:	4814      	ldr	r0, [pc, #80]	; (800056c <MX_TIM1_Init+0x9c>)
 800051c:	f001 fe4c 	bl	80021b8 <HAL_TIM_Base_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000526:	f000 f9a9 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	4619      	mov	r1, r3
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <MX_TIM1_Init+0x9c>)
 8000538:	f002 f8ba 	bl	80026b0 <HAL_TIM_ConfigClockSource>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000542:	f000 f99b 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	4619      	mov	r1, r3
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <MX_TIM1_Init+0x9c>)
 8000554:	f002 fc24 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800055e:	f000 f98d 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000080 	.word	0x20000080
 8000570:	40012c00 	.word	0x40012c00

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a4:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <MX_TIM2_Init+0xec>)
 80005a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_TIM2_Init+0xec>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <MX_TIM2_Init+0xec>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_TIM2_Init+0xec>)
 80005ba:	22ff      	movs	r2, #255	; 0xff
 80005bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_TIM2_Init+0xec>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <MX_TIM2_Init+0xec>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	4825      	ldr	r0, [pc, #148]	; (8000660 <MX_TIM2_Init+0xec>)
 80005cc:	f001 fdf4 	bl	80021b8 <HAL_TIM_Base_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80005d6:	f000 f951 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e4:	4619      	mov	r1, r3
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <MX_TIM2_Init+0xec>)
 80005e8:	f002 f862 	bl	80026b0 <HAL_TIM_ConfigClockSource>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80005f2:	f000 f943 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005f6:	481a      	ldr	r0, [pc, #104]	; (8000660 <MX_TIM2_Init+0xec>)
 80005f8:	f001 fe9e 	bl	8002338 <HAL_TIM_PWM_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000602:	f000 f93b 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4619      	mov	r1, r3
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <MX_TIM2_Init+0xec>)
 8000616:	f002 fbc3 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000620:	f000 f92c 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_TIM2_Init+0xec>)
 800063c:	f001 ff76 	bl	800252c <HAL_TIM_PWM_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000646:	f000 f919 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //cho phep PWM (gia lap DAC)
 800064a:	2100      	movs	r1, #0
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_TIM2_Init+0xec>)
 800064e:	f001 fecb 	bl	80023e8 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <MX_TIM2_Init+0xec>)
 8000654:	f000 fa00 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 8000658:	bf00      	nop
 800065a:	3738      	adds	r7, #56	; 0x38
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000c8 	.word	0x200000c8

08000664 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_TIM3_Init+0xa0>)
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <MX_TIM3_Init+0xa4>)
 8000684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4 - 1;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_TIM3_Init+0xa0>)
 8000688:	2203      	movs	r2, #3
 800068a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_TIM3_Init+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125 - 1;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM3_Init+0xa0>)
 8000694:	227c      	movs	r2, #124	; 0x7c
 8000696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM3_Init+0xa0>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM3_Init+0xa0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a4:	4817      	ldr	r0, [pc, #92]	; (8000704 <MX_TIM3_Init+0xa0>)
 80006a6:	f001 fd87 	bl	80021b8 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80006b0:	f000 f8e4 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <MX_TIM3_Init+0xa0>)
 80006c2:	f001 fff5 	bl	80026b0 <HAL_TIM_ConfigClockSource>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80006cc:	f000 f8d6 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <MX_TIM3_Init+0xa0>)
 80006de:	f002 fb5f 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80006e8:	f000 f8c8 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // Kích hoạt DMA trên Timer Update Event
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_UPDATE); //Kich hoat DMA
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <MX_TIM3_Init+0xa0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <MX_TIM3_Init+0xa0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006fa:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000110 	.word	0x20000110
 8000708:	40000400 	.word	0x40000400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x38>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x38>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x38>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200d      	movs	r0, #13
 8000730:	f000 fb7f 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000734:	200d      	movs	r0, #13
 8000736:	f000 fb98 	bl	8000e6a <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <MX_GPIO_Init+0x120>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a41      	ldr	r2, [pc, #260]	; (8000868 <MX_GPIO_Init+0x120>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <MX_GPIO_Init+0x120>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0310 	and.w	r3, r3, #16
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000774:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <MX_GPIO_Init+0x120>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <MX_GPIO_Init+0x120>)
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b39      	ldr	r3, [pc, #228]	; (8000868 <MX_GPIO_Init+0x120>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <MX_GPIO_Init+0x120>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a35      	ldr	r2, [pc, #212]	; (8000868 <MX_GPIO_Init+0x120>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_GPIO_Init+0x120>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_GPIO_Init+0x120>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <MX_GPIO_Init+0x120>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_GPIO_Init+0x120>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_OF_AMMO_GPIO_Port, OUT_OF_AMMO_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c2:	482a      	ldr	r0, [pc, #168]	; (800086c <MX_GPIO_Init+0x124>)
 80007c4:	f000 ff6d 	bl	80016a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2102      	movs	r1, #2
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <MX_GPIO_Init+0x128>)
 80007ce:	f000 ff68 	bl	80016a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <MX_GPIO_Init+0x12c>)
 80007da:	f000 ff62 	bl	80016a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OUT_OF_AMMO_Pin */
  GPIO_InitStruct.Pin = OUT_OF_AMMO_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_OF_AMMO_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <MX_GPIO_Init+0x124>)
 80007f8:	f000 fdb8 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : LASER_Pin */
  GPIO_InitStruct.Pin = LASER_Pin;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LASER_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <MX_GPIO_Init+0x128>)
 8000814:	f000 fdaa 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_TRIGGER_Pin LASER_TRIGGER_Pin RELOAD_TRIGGER_Pin */
  GPIO_InitStruct.Pin = MODE_TRIGGER_Pin|LASER_TRIGGER_Pin|RELOAD_TRIGGER_Pin;
 8000818:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_GPIO_Init+0x130>)
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_GPIO_Init+0x12c>)
 800082e:	f000 fd9d 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : VIBRATION_MOTOR_Pin */
  GPIO_InitStruct.Pin = VIBRATION_MOTOR_Pin;
 8000832:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VIBRATION_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <MX_GPIO_Init+0x12c>)
 800084c:	f000 fd8e 	bl	800136c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 faec 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800085a:	2028      	movs	r0, #40	; 0x28
 800085c:	f000 fb05 	bl	8000e6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	40011000 	.word	0x40011000
 8000870:	40010800 	.word	0x40010800
 8000874:	40010c00 	.word	0x40010c00
 8000878:	10110000 	.word	0x10110000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_MspInit+0x5c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <HAL_MspInit+0x5c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x5c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x5c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_MspInit+0x60>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_MspInit+0x60>)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010000 	.word	0x40010000

080008ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <HAL_I2C_MspInit+0x74>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d124      	bne.n	8000956 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_I2C_MspInit+0x78>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <HAL_I2C_MspInit+0x78>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_I2C_MspInit+0x78>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0308 	and.w	r3, r3, #8
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000924:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4619      	mov	r1, r3
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <HAL_I2C_MspInit+0x7c>)
 800093a:	f000 fd17 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_I2C_MspInit+0x78>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_I2C_MspInit+0x78>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_I2C_MspInit+0x78>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40005800 	.word	0x40005800
 8000964:	40021000 	.word	0x40021000
 8000968:	40010c00 	.word	0x40010c00

0800096c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <HAL_TIM_Base_MspInit+0xd8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d10c      	bne.n	8000998 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800097e:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 8000984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000996:	e050      	b.n	8000a3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a0:	d10c      	bne.n	80009bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
}
 80009ba:	e03e      	b.n	8000a3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_TIM_Base_MspInit+0xe0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d139      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <HAL_TIM_Base_MspInit+0xdc>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <HAL_TIM_Base_MspInit+0xe8>)
 80009e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 80009e6:	2210      	movs	r2, #16
 80009e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a0c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a14:	f000 fa44 	bl	8000ea0 <HAL_DMA_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_TIM_Base_MspInit+0xb6>
      Error_Handler();
 8000a1e:	f7ff ff2d 	bl	800087c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a32:	621a      	str	r2, [r3, #32]
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_TIM_Base_MspInit+0xe4>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40012c00 	.word	0x40012c00
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40000400 	.word	0x40000400
 8000a50:	20000158 	.word	0x20000158
 8000a54:	40020030 	.word	0x40020030

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a76:	d12a      	bne.n	8000ace <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_TIM_MspPostInit+0x80>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_TIM_MspPostInit+0x80>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_TIM_MspPostInit+0x80>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8000a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <HAL_TIM_MspPostInit+0x84>)
 8000aa6:	f000 fc61 	bl	800136c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_TIM_MspPostInit+0x88>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <HAL_TIM_MspPostInit+0x88>)
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f88f 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Channel3_IRQHandler+0x10>)
 8000b3a:	f000 fae3 	bl	8001104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000158 	.word	0x20000158

08000b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_TRIGGER_Pin);
 8000b4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b50:	f000 fdd8 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LASER_TRIGGER_Pin);
 8000b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b58:	f000 fdd4 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RELOAD_TRIGGER_Pin);
 8000b5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b60:	f000 fdd0 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff fff8 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b7a:	490c      	ldr	r1, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b90:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f002 f965 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fc17 	bl	80003d4 <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bb0:	080082d4 	.word	0x080082d4
  ldr r2, =_sbss
 8000bb4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb8:	200001a8 	.word	0x200001a8

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f923 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe54 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f93b 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f903 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	200001a4 	.word	0x200001a4

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	200001a4 	.word	0x200001a4

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <__NVIC_EnableIRQ+0x34>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff90 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff2d 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff42 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff35 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e043      	b.n	8000f3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_DMA_Init+0xa8>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_DMA_Init+0xac>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	009a      	lsls	r2, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_DMA_Init+0xb0>)
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	bffdfff8 	.word	0xbffdfff8
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_DMA_Start_IT+0x20>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e04b      	b.n	800100c <HAL_DMA_Start_IT+0xb8>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d13a      	bne.n	8000ffe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 f9af 	bl	8001310 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 020e 	orr.w	r2, r2, #14
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e00f      	b.n	8000fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0204 	bic.w	r2, r2, #4
 8000fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 020a 	orr.w	r2, r2, #10
 8000fea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e005      	b.n	800100a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001006:	2302      	movs	r3, #2
 8001008:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d005      	beq.n	8001038 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2204      	movs	r2, #4
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e051      	b.n	80010dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <HAL_DMA_Abort_IT+0xd4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d029      	beq.n	80010b6 <HAL_DMA_Abort_IT+0xa2>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <HAL_DMA_Abort_IT+0xd8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d022      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x9e>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_DMA_Abort_IT+0xdc>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01a      	beq.n	80010ac <HAL_DMA_Abort_IT+0x98>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_DMA_Abort_IT+0xe0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d012      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x92>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_DMA_Abort_IT+0xe4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00a      	beq.n	80010a0 <HAL_DMA_Abort_IT+0x8c>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_DMA_Abort_IT+0xe8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d102      	bne.n	800109a <HAL_DMA_Abort_IT+0x86>
 8001094:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001098:	e00e      	b.n	80010b8 <HAL_DMA_Abort_IT+0xa4>
 800109a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109e:	e00b      	b.n	80010b8 <HAL_DMA_Abort_IT+0xa4>
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	e008      	b.n	80010b8 <HAL_DMA_Abort_IT+0xa4>
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	e005      	b.n	80010b8 <HAL_DMA_Abort_IT+0xa4>
 80010ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b0:	e002      	b.n	80010b8 <HAL_DMA_Abort_IT+0xa4>
 80010b2:	2310      	movs	r3, #16
 80010b4:	e000      	b.n	80010b8 <HAL_DMA_Abort_IT+0xa4>
 80010b6:	2301      	movs	r3, #1
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <HAL_DMA_Abort_IT+0xec>)
 80010ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	4798      	blx	r3
    } 
  }
  return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020008 	.word	0x40020008
 80010ec:	4002001c 	.word	0x4002001c
 80010f0:	40020030 	.word	0x40020030
 80010f4:	40020044 	.word	0x40020044
 80010f8:	40020058 	.word	0x40020058
 80010fc:	4002006c 	.word	0x4002006c
 8001100:	40020000 	.word	0x40020000

08001104 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	2204      	movs	r2, #4
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d04f      	beq.n	80011cc <HAL_DMA_IRQHandler+0xc8>
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b00      	cmp	r3, #0
 8001134:	d04a      	beq.n	80011cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0204 	bic.w	r2, r2, #4
 8001152:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a66      	ldr	r2, [pc, #408]	; (80012f4 <HAL_DMA_IRQHandler+0x1f0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d029      	beq.n	80011b2 <HAL_DMA_IRQHandler+0xae>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a65      	ldr	r2, [pc, #404]	; (80012f8 <HAL_DMA_IRQHandler+0x1f4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d022      	beq.n	80011ae <HAL_DMA_IRQHandler+0xaa>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a63      	ldr	r2, [pc, #396]	; (80012fc <HAL_DMA_IRQHandler+0x1f8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01a      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xa4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a62      	ldr	r2, [pc, #392]	; (8001300 <HAL_DMA_IRQHandler+0x1fc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d012      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x9e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a60      	ldr	r2, [pc, #384]	; (8001304 <HAL_DMA_IRQHandler+0x200>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00a      	beq.n	800119c <HAL_DMA_IRQHandler+0x98>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a5f      	ldr	r2, [pc, #380]	; (8001308 <HAL_DMA_IRQHandler+0x204>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d102      	bne.n	8001196 <HAL_DMA_IRQHandler+0x92>
 8001190:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001194:	e00e      	b.n	80011b4 <HAL_DMA_IRQHandler+0xb0>
 8001196:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800119a:	e00b      	b.n	80011b4 <HAL_DMA_IRQHandler+0xb0>
 800119c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011a0:	e008      	b.n	80011b4 <HAL_DMA_IRQHandler+0xb0>
 80011a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a6:	e005      	b.n	80011b4 <HAL_DMA_IRQHandler+0xb0>
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	e002      	b.n	80011b4 <HAL_DMA_IRQHandler+0xb0>
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	e000      	b.n	80011b4 <HAL_DMA_IRQHandler+0xb0>
 80011b2:	2304      	movs	r3, #4
 80011b4:	4a55      	ldr	r2, [pc, #340]	; (800130c <HAL_DMA_IRQHandler+0x208>)
 80011b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8094 	beq.w	80012ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011ca:	e08e      	b.n	80012ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	2202      	movs	r2, #2
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d056      	beq.n	800128a <HAL_DMA_IRQHandler+0x186>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d051      	beq.n	800128a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020a 	bic.w	r2, r2, #10
 8001202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a38      	ldr	r2, [pc, #224]	; (80012f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d029      	beq.n	800126a <HAL_DMA_IRQHandler+0x166>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <HAL_DMA_IRQHandler+0x1f4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d022      	beq.n	8001266 <HAL_DMA_IRQHandler+0x162>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_DMA_IRQHandler+0x1f8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01a      	beq.n	8001260 <HAL_DMA_IRQHandler+0x15c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <HAL_DMA_IRQHandler+0x1fc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d012      	beq.n	800125a <HAL_DMA_IRQHandler+0x156>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_DMA_IRQHandler+0x200>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00a      	beq.n	8001254 <HAL_DMA_IRQHandler+0x150>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_DMA_IRQHandler+0x204>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d102      	bne.n	800124e <HAL_DMA_IRQHandler+0x14a>
 8001248:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800124c:	e00e      	b.n	800126c <HAL_DMA_IRQHandler+0x168>
 800124e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001252:	e00b      	b.n	800126c <HAL_DMA_IRQHandler+0x168>
 8001254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001258:	e008      	b.n	800126c <HAL_DMA_IRQHandler+0x168>
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	e005      	b.n	800126c <HAL_DMA_IRQHandler+0x168>
 8001260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001264:	e002      	b.n	800126c <HAL_DMA_IRQHandler+0x168>
 8001266:	2320      	movs	r3, #32
 8001268:	e000      	b.n	800126c <HAL_DMA_IRQHandler+0x168>
 800126a:	2302      	movs	r3, #2
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_DMA_IRQHandler+0x208>)
 800126e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d034      	beq.n	80012ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001288:	e02f      	b.n	80012ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2208      	movs	r2, #8
 8001290:	409a      	lsls	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d028      	beq.n	80012ec <HAL_DMA_IRQHandler+0x1e8>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d023      	beq.n	80012ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020e 	bic.w	r2, r2, #14
 80012b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
    }
  }
  return;
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
}
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020008 	.word	0x40020008
 80012f8:	4002001c 	.word	0x4002001c
 80012fc:	40020030 	.word	0x40020030
 8001300:	40020044 	.word	0x40020044
 8001304:	40020058 	.word	0x40020058
 8001308:	4002006c 	.word	0x4002006c
 800130c:	40020000 	.word	0x40020000

08001310 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d108      	bne.n	8001350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800134e:	e007      	b.n	8001360 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e169      	b.n	8001654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001380:	2201      	movs	r2, #1
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8158 	bne.w	800164e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a9a      	ldr	r2, [pc, #616]	; (800160c <HAL_GPIO_Init+0x2a0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d05e      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013a8:	4a98      	ldr	r2, [pc, #608]	; (800160c <HAL_GPIO_Init+0x2a0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d875      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ae:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d058      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013b4:	4a96      	ldr	r2, [pc, #600]	; (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d86f      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ba:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_GPIO_Init+0x2a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d052      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013c0:	4a94      	ldr	r2, [pc, #592]	; (8001614 <HAL_GPIO_Init+0x2a8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d869      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013c6:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_GPIO_Init+0x2ac>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04c      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013cc:	4a92      	ldr	r2, [pc, #584]	; (8001618 <HAL_GPIO_Init+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d863      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013d2:	4a92      	ldr	r2, [pc, #584]	; (800161c <HAL_GPIO_Init+0x2b0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d046      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013d8:	4a90      	ldr	r2, [pc, #576]	; (800161c <HAL_GPIO_Init+0x2b0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d85d      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d82a      	bhi.n	8001438 <HAL_GPIO_Init+0xcc>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d859      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <HAL_GPIO_Init+0x80>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001453 	.word	0x08001453
 80013f8:	08001495 	.word	0x08001495
 80013fc:	0800149b 	.word	0x0800149b
 8001400:	0800149b 	.word	0x0800149b
 8001404:	0800149b 	.word	0x0800149b
 8001408:	0800149b 	.word	0x0800149b
 800140c:	0800149b 	.word	0x0800149b
 8001410:	0800149b 	.word	0x0800149b
 8001414:	0800149b 	.word	0x0800149b
 8001418:	0800149b 	.word	0x0800149b
 800141c:	0800149b 	.word	0x0800149b
 8001420:	0800149b 	.word	0x0800149b
 8001424:	0800149b 	.word	0x0800149b
 8001428:	0800149b 	.word	0x0800149b
 800142c:	0800149b 	.word	0x0800149b
 8001430:	08001449 	.word	0x08001449
 8001434:	0800145d 	.word	0x0800145d
 8001438:	4a79      	ldr	r2, [pc, #484]	; (8001620 <HAL_GPIO_Init+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143e:	e02c      	b.n	800149a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e029      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e024      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	3308      	adds	r3, #8
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e01f      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	330c      	adds	r3, #12
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e01a      	b.n	800149c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146e:	2304      	movs	r3, #4
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e013      	b.n	800149c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	611a      	str	r2, [r3, #16]
          break;
 8001486:	e009      	b.n	800149c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	615a      	str	r2, [r3, #20]
          break;
 8001492:	e003      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x130>
          break;
 800149a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d801      	bhi.n	80014a6 <HAL_GPIO_Init+0x13a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_Init+0x13e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	; 0xff
 80014b0:	d802      	bhi.n	80014b8 <HAL_GPIO_Init+0x14c>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x152>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3b08      	subs	r3, #8
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	210f      	movs	r1, #15
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	6a39      	ldr	r1, [r7, #32]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80b1 	beq.w	800164e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001504:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_GPIO_Init+0x2bc>)
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a40      	ldr	r2, [pc, #256]	; (800162c <HAL_GPIO_Init+0x2c0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <HAL_GPIO_Init+0x2c8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3d      	ldr	r2, [pc, #244]	; (8001638 <HAL_GPIO_Init+0x2cc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e0>
 8001548:	2303      	movs	r3, #3
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 800154c:	2304      	movs	r3, #4
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001558:	2300      	movs	r3, #0
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156a:	492f      	ldr	r1, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x2bc>)
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	492c      	ldr	r1, [pc, #176]	; (800163c <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4928      	ldr	r1, [pc, #160]	; (800163c <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4922      	ldr	r1, [pc, #136]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	491e      	ldr	r1, [pc, #120]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4918      	ldr	r1, [pc, #96]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4914      	ldr	r1, [pc, #80]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d021      	beq.n	8001640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e021      	b.n	800164e <HAL_GPIO_Init+0x2e2>
 800160a:	bf00      	nop
 800160c:	10320000 	.word	0x10320000
 8001610:	10310000 	.word	0x10310000
 8001614:	10220000 	.word	0x10220000
 8001618:	10210000 	.word	0x10210000
 800161c:	10120000 	.word	0x10120000
 8001620:	10110000 	.word	0x10110000
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	40011000 	.word	0x40011000
 8001638:	40011400 	.word	0x40011400
 800163c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_GPIO_Init+0x304>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <HAL_GPIO_Init+0x304>)
 800164a:	4013      	ands	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae8e 	bne.w	8001380 <HAL_GPIO_Init+0x14>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	; 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	807b      	strh	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b2:	787b      	ldrb	r3, [r7, #1]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016be:	e003      	b.n	80016c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	611a      	str	r2, [r3, #16]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	400b      	ands	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	611a      	str	r2, [r3, #16]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fd6e 	bl	8000204 <HAL_GPIO_EXTI_Callback>
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12b      	b.n	800199e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff f8c6 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	; 0x24
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001798:	f000 fcdc 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a81      	ldr	r2, [pc, #516]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d807      	bhi.n	80017b8 <HAL_I2C_Init+0x84>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a80      	ldr	r2, [pc, #512]	; (80019ac <HAL_I2C_Init+0x278>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e006      	b.n	80017c6 <HAL_I2C_Init+0x92>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a7d      	ldr	r2, [pc, #500]	; (80019b0 <HAL_I2C_Init+0x27c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <HAL_I2C_Init+0x280>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0c9b      	lsrs	r3, r3, #18
 80017d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d802      	bhi.n	8001808 <HAL_I2C_Init+0xd4>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	e009      	b.n	800181c <HAL_I2C_Init+0xe8>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_I2C_Init+0x284>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	495c      	ldr	r1, [pc, #368]	; (80019a8 <HAL_I2C_Init+0x274>)
 8001838:	428b      	cmp	r3, r1
 800183a:	d819      	bhi.n	8001870 <HAL_I2C_Init+0x13c>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e59      	subs	r1, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fbb1 f3f3 	udiv	r3, r1, r3
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001850:	400b      	ands	r3, r1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <HAL_I2C_Init+0x138>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e59      	subs	r1, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	e051      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 800186c:	2304      	movs	r3, #4
 800186e:	e04f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_I2C_Init+0x168>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e012      	b.n	80018c2 <HAL_I2C_Init+0x18e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Init+0x196>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e022      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <HAL_I2C_Init+0x1bc>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e58      	subs	r0, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6859      	ldr	r1, [r3, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	440b      	add	r3, r1
 80018e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	e00f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800193e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6911      	ldr	r1, [r2, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68d2      	ldr	r2, [r2, #12]
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	000186a0 	.word	0x000186a0
 80019ac:	001e847f 	.word	0x001e847f
 80019b0:	003d08ff 	.word	0x003d08ff
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e272      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8087 	beq.w	8001aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e8:	4b8f      	ldr	r3, [pc, #572]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d112      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5e>
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d06c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x12c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d168      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e24c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x76>
 8001a24:	4b80      	ldr	r3, [pc, #512]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a7f      	ldr	r2, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e02e      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x98>
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7a      	ldr	r2, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0xbc>
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a71      	ldr	r2, [pc, #452]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6e      	ldr	r2, [pc, #440]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f8ea 	bl	8000c70 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f8e6 	bl	8000c70 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e200      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe4>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8d6 	bl	8000c70 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f8d2 	bl	8000c70 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1ec      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x10c>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d063      	beq.n	8001bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
 8001b0e:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x176>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1c0      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4939      	ldr	r1, [pc, #228]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	e03a      	b.n	8001bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff f88b 	bl	8000c70 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f887 	bl	8000c70 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1a1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4927      	ldr	r1, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	e015      	b.n	8001bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f86a 	bl	8000c70 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff f866 	bl	8000c70 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e180      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03a      	beq.n	8001c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f84a 	bl	8000c70 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff f846 	bl	8000c70 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e160      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f000 fabc 	bl	800217c <RCC_Delay>
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f830 	bl	8000c70 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c12:	e00f      	b.n	8001c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff f82c 	bl	8000c70 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d908      	bls.n	8001c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e146      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	42420000 	.word	0x42420000
 8001c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e9      	bne.n	8001c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a6 	beq.w	8001d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10d      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b85      	ldr	r3, [pc, #532]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d118      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c86:	4b7f      	ldr	r3, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c92:	f7fe ffed 	bl	8000c70 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9a:	f7fe ffe9 	bl	8000c70 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	; 0x64
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e103      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x312>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e02d      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x334>
 8001cd6:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a66      	ldr	r2, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	e01c      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d10c      	bne.n	8001d12 <HAL_RCC_OscConfig+0x356>
 8001cf8:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e00b      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a5a      	ldr	r2, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d015      	beq.n	8001d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7fe ff9d 	bl	8000c70 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7fe ff99 	bl	8000c70 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0b1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ee      	beq.n	8001d3a <HAL_RCC_OscConfig+0x37e>
 8001d5c:	e014      	b.n	8001d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7fe ff87 	bl	8000c70 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7fe ff83 	bl	8000c70 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e09b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8087 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d061      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d146      	bne.n	8001e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ff57 	bl	8000c70 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe ff53 	bl	8000c70 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e06d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d108      	bne.n	8001e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4921      	ldr	r1, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a19      	ldr	r1, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	430b      	orrs	r3, r1
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ff27 	bl	8000c70 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ff23 	bl	8000c70 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e03d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x46a>
 8001e44:	e035      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x4cc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff10 	bl	8000c70 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ff0c 	bl	8000c70 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e026      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x498>
 8001e72:	e01e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e019      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x500>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0d0      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b67      	ldr	r3, [pc, #412]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4965      	ldr	r1, [pc, #404]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b63      	ldr	r3, [pc, #396]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b8      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a58      	ldr	r2, [pc, #352]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f34:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	494d      	ldr	r1, [pc, #308]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d040      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d115      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e073      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06b      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4936      	ldr	r1, [pc, #216]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fe5e 	bl	8000c70 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe fe5a 	bl	8000c70 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e053      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 020c 	and.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1eb      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d210      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4922      	ldr	r1, [pc, #136]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e032      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4916      	ldr	r1, [pc, #88]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	490e      	ldr	r1, [pc, #56]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204e:	f000 f821 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	490a      	ldr	r1, [pc, #40]	; (8002088 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1cc>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1d0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fdbc 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40022000 	.word	0x40022000
 8002084:	40021000 	.word	0x40021000
 8002088:	080082a0 	.word	0x080082a0
 800208c:	20000004 	.word	0x20000004
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x30>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x36>
 80020c2:	e027      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_GetSysClockFreq+0x98>)
 80020c6:	613b      	str	r3, [r7, #16]
      break;
 80020c8:	e027      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d010      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_RCC_GetSysClockFreq+0x94>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0c5b      	lsrs	r3, r3, #17
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_RCC_GetSysClockFreq+0x98>)
 80020f6:	fb03 f202 	mul.w	r2, r3, r2
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	613b      	str	r3, [r7, #16]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002116:	613b      	str	r3, [r7, #16]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	693b      	ldr	r3, [r7, #16]
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	00b71b00 	.word	0x00b71b00
 8002130:	080082b8 	.word	0x080082b8
 8002134:	080082c8 	.word	0x080082c8
 8002138:	003d0900 	.word	0x003d0900
 800213c:	007a1200 	.word	0x007a1200

08002140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <HAL_RCC_GetHCLKFreq+0x10>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002158:	f7ff fff2 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	080082b0 	.word	0x080082b0

0800217c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <RCC_Delay+0x34>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <RCC_Delay+0x38>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0a5b      	lsrs	r3, r3, #9
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002198:	bf00      	nop
  }
  while (Delay --);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	60fa      	str	r2, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <RCC_Delay+0x1c>
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	20000004 	.word	0x20000004
 80021b4:	10624dd3 	.word	0x10624dd3

080021b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e041      	b.n	800224e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fbc4 	bl	800096c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3304      	adds	r3, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f000 fb22 	bl	8002840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d001      	beq.n	8002270 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <HAL_TIM_Base_Start+0x88>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00e      	beq.n	80022a0 <HAL_TIM_Base_Start+0x48>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d009      	beq.n	80022a0 <HAL_TIM_Base_Start+0x48>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_TIM_Base_Start+0x8c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <HAL_TIM_Base_Start+0x48>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_TIM_Base_Start+0x90>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d111      	bne.n	80022c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d010      	beq.n	80022d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	e007      	b.n	80022d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800

080022ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10f      	bne.n	8002324 <HAL_TIM_Base_Stop+0x38>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	f240 4344 	movw	r3, #1092	; 0x444
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_TIM_Base_Stop+0x38>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f839 	bl	80023d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 fa62 	bl	8002840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_TIM_PWM_Start+0x24>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e022      	b.n	8002452 <HAL_TIM_PWM_Start+0x6a>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b04      	cmp	r3, #4
 8002410:	d109      	bne.n	8002426 <HAL_TIM_PWM_Start+0x3e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	bf14      	ite	ne
 800241e:	2301      	movne	r3, #1
 8002420:	2300      	moveq	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	e015      	b.n	8002452 <HAL_TIM_PWM_Start+0x6a>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d109      	bne.n	8002440 <HAL_TIM_PWM_Start+0x58>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e008      	b.n	8002452 <HAL_TIM_PWM_Start+0x6a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e05e      	b.n	8002518 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d104      	bne.n	800246a <HAL_TIM_PWM_Start+0x82>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002468:	e013      	b.n	8002492 <HAL_TIM_PWM_Start+0xaa>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d104      	bne.n	800247a <HAL_TIM_PWM_Start+0x92>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002478:	e00b      	b.n	8002492 <HAL_TIM_PWM_Start+0xaa>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d104      	bne.n	800248a <HAL_TIM_PWM_Start+0xa2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	e003      	b.n	8002492 <HAL_TIM_PWM_Start+0xaa>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2201      	movs	r2, #1
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fc5c 	bl	8002d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_TIM_PWM_Start+0x138>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d107      	bne.n	80024ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_TIM_PWM_Start+0x138>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00e      	beq.n	80024e2 <HAL_TIM_PWM_Start+0xfa>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024cc:	d009      	beq.n	80024e2 <HAL_TIM_PWM_Start+0xfa>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_TIM_PWM_Start+0x13c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d004      	beq.n	80024e2 <HAL_TIM_PWM_Start+0xfa>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <HAL_TIM_PWM_Start+0x140>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d111      	bne.n	8002506 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d010      	beq.n	8002516 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	e007      	b.n	8002516 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800

0800252c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002546:	2302      	movs	r3, #2
 8002548:	e0ae      	b.n	80026a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	f200 809f 	bhi.w	8002698 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800255a:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002560:	08002595 	.word	0x08002595
 8002564:	08002699 	.word	0x08002699
 8002568:	08002699 	.word	0x08002699
 800256c:	08002699 	.word	0x08002699
 8002570:	080025d5 	.word	0x080025d5
 8002574:	08002699 	.word	0x08002699
 8002578:	08002699 	.word	0x08002699
 800257c:	08002699 	.word	0x08002699
 8002580:	08002617 	.word	0x08002617
 8002584:	08002699 	.word	0x08002699
 8002588:	08002699 	.word	0x08002699
 800258c:	08002699 	.word	0x08002699
 8002590:	08002657 	.word	0x08002657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f9be 	bl	800291c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0208 	orr.w	r2, r2, #8
 80025ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	619a      	str	r2, [r3, #24]
      break;
 80025d2:	e064      	b.n	800269e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fa04 	bl	80029e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6999      	ldr	r1, [r3, #24]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	021a      	lsls	r2, r3, #8
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	619a      	str	r2, [r3, #24]
      break;
 8002614:	e043      	b.n	800269e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fa4d 	bl	8002abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0208 	orr.w	r2, r2, #8
 8002630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0204 	bic.w	r2, r2, #4
 8002640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69d9      	ldr	r1, [r3, #28]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	61da      	str	r2, [r3, #28]
      break;
 8002654:	e023      	b.n	800269e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fa97 	bl	8002b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69d9      	ldr	r1, [r3, #28]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	021a      	lsls	r2, r3, #8
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	61da      	str	r2, [r3, #28]
      break;
 8002696:	e002      	b.n	800269e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	75fb      	strb	r3, [r7, #23]
      break;
 800269c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_TIM_ConfigClockSource+0x1c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0b4      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x186>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002704:	d03e      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0xd4>
 8002706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270a:	f200 8087 	bhi.w	800281c <HAL_TIM_ConfigClockSource+0x16c>
 800270e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002712:	f000 8086 	beq.w	8002822 <HAL_TIM_ConfigClockSource+0x172>
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271a:	d87f      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b70      	cmp	r3, #112	; 0x70
 800271e:	d01a      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0xa6>
 8002720:	2b70      	cmp	r3, #112	; 0x70
 8002722:	d87b      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d050      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x11a>
 8002728:	2b60      	cmp	r3, #96	; 0x60
 800272a:	d877      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b50      	cmp	r3, #80	; 0x50
 800272e:	d03c      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0xfa>
 8002730:	2b50      	cmp	r3, #80	; 0x50
 8002732:	d873      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d058      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x13a>
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d86f      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d064      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x15a>
 8002740:	2b30      	cmp	r3, #48	; 0x30
 8002742:	d86b      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d060      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d867      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05c      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	2b10      	cmp	r3, #16
 8002752:	d05a      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	e062      	b.n	800281c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002766:	f000 fad8 	bl	8002d1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	609a      	str	r2, [r3, #8]
      break;
 8002782:	e04f      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002794:	f000 fac1 	bl	8002d1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a6:	609a      	str	r2, [r3, #8]
      break;
 80027a8:	e03c      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	461a      	mov	r2, r3
 80027b8:	f000 fa38 	bl	8002c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2150      	movs	r1, #80	; 0x50
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fa8f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 80027c8:	e02c      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d6:	461a      	mov	r2, r3
 80027d8:	f000 fa56 	bl	8002c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2160      	movs	r1, #96	; 0x60
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fa7f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 80027e8:	e01c      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f6:	461a      	mov	r2, r3
 80027f8:	f000 fa18 	bl	8002c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fa6f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002808:	e00c      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f000 fa66 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 800281a:	e003      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e000      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a2f      	ldr	r2, [pc, #188]	; (8002910 <TIM_Base_SetConfig+0xd0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00b      	beq.n	8002870 <TIM_Base_SetConfig+0x30>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285e:	d007      	beq.n	8002870 <TIM_Base_SetConfig+0x30>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <TIM_Base_SetConfig+0xd4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_Base_SetConfig+0x30>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <TIM_Base_SetConfig+0xd8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d108      	bne.n	8002882 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a22      	ldr	r2, [pc, #136]	; (8002910 <TIM_Base_SetConfig+0xd0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00b      	beq.n	80028a2 <TIM_Base_SetConfig+0x62>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d007      	beq.n	80028a2 <TIM_Base_SetConfig+0x62>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <TIM_Base_SetConfig+0xd4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_Base_SetConfig+0x62>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <TIM_Base_SetConfig+0xd8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d108      	bne.n	80028b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <TIM_Base_SetConfig+0xd0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d103      	bne.n	80028e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f023 0201 	bic.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	611a      	str	r2, [r3, #16]
  }
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800

0800291c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0201 	bic.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 0302 	bic.w	r3, r3, #2
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <TIM_OC1_SetConfig+0xc8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10c      	bne.n	8002992 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0308 	bic.w	r3, r3, #8
 800297e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <TIM_OC1_SetConfig+0xc8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d111      	bne.n	80029be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40012c00 	.word	0x40012c00

080029e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f023 0210 	bic.w	r2, r3, #16
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0320 	bic.w	r3, r3, #32
 8002a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <TIM_OC2_SetConfig+0xd0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10d      	bne.n	8002a64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <TIM_OC2_SetConfig+0xd0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d113      	bne.n	8002a94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC3_SetConfig+0xd0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10d      	bne.n	8002b36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <TIM_OC3_SetConfig+0xd0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d113      	bne.n	8002b66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	621a      	str	r2, [r3, #32]
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	031b      	lsls	r3, r3, #12
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <TIM_OC4_SetConfig+0x98>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d109      	bne.n	8002c04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40012c00 	.word	0x40012c00

08002c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 030a 	bic.w	r3, r3, #10
 8002c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0210 	bic.w	r2, r3, #16
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	621a      	str	r2, [r3, #32]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f043 0307 	orr.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	021a      	lsls	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e046      	b.n	8002e46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d009      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800

08002e5c <memset>:
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4402      	add	r2, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <memset+0xa>
 8002e64:	4770      	bx	lr
 8002e66:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6a:	e7f9      	b.n	8002e60 <memset+0x4>

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	2600      	movs	r6, #0
 8002e70:	4d0c      	ldr	r5, [pc, #48]	; (8002ea4 <__libc_init_array+0x38>)
 8002e72:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <__libc_init_array+0x3c>)
 8002e74:	1b64      	subs	r4, r4, r5
 8002e76:	10a4      	asrs	r4, r4, #2
 8002e78:	42a6      	cmp	r6, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	f000 f81a 	bl	8002eb4 <_init>
 8002e80:	2600      	movs	r6, #0
 8002e82:	4d0a      	ldr	r5, [pc, #40]	; (8002eac <__libc_init_array+0x40>)
 8002e84:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <__libc_init_array+0x44>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	42a6      	cmp	r6, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e94:	4798      	blx	r3
 8002e96:	3601      	adds	r6, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9e:	4798      	blx	r3
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	080082cc 	.word	0x080082cc
 8002ea8:	080082cc 	.word	0x080082cc
 8002eac:	080082cc 	.word	0x080082cc
 8002eb0:	080082d0 	.word	0x080082d0

08002eb4 <_init>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	bf00      	nop
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr

08002ec0 <_fini>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr
