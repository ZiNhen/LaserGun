
LaserGun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000af94  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f10c  0800f10c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f10c  0800f10c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f10c  0800f10c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f110  0800f110  0001f110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800f114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  2000001c  0800f130  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800f130  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd0f  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffc  00000000  00000000  0002cd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b03  00000000  00000000  0002fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d6c  00000000  00000000  000306b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010330  00000000  00000000  0004841f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008af57  00000000  00000000  0005874f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b64  00000000  00000000  000e36a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e720c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004160 	.word	0x08004160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08004160 	.word	0x08004160

0800014c <ReloadMessage>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ReloadMessage(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8000152:	2000      	movs	r0, #0
 8000154:	f000 fdc4 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_SetCursor(16, 19);
 8000158:	2113      	movs	r1, #19
 800015a:	2010      	movs	r0, #16
 800015c:	f000 ff0a 	bl	8000f74 <ssd1306_SetCursor>
	ssd1306_WriteString("RELOAD", Font_16x26, White);
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <ReloadMessage+0x2c>)
 8000162:	2201      	movs	r2, #1
 8000164:	9200      	str	r2, [sp, #0]
 8000166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <ReloadMessage+0x30>)
 800016a:	f000 fedd 	bl	8000f28 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800016e:	f000 fdcf 	bl	8000d10 <ssd1306_UpdateScreen>
}
 8000172:	bf00      	nop
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	0800f0d4 	.word	0x0800f0d4
 800017c:	080041a4 	.word	0x080041a4

08000180 <ReloadingMessage>:

void ReloadingMessage(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fdaa 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_SetCursor(14, 23);
 800018c:	2117      	movs	r1, #23
 800018e:	200e      	movs	r0, #14
 8000190:	f000 fef0 	bl	8000f74 <ssd1306_SetCursor>
	ssd1306_WriteString("RELOADING", Font_11x18, White);
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <ReloadingMessage+0x2c>)
 8000196:	2201      	movs	r2, #1
 8000198:	9200      	str	r2, [sp, #0]
 800019a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <ReloadingMessage+0x30>)
 800019e:	f000 fec3 	bl	8000f28 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80001a2:	f000 fdb5 	bl	8000d10 <ssd1306_UpdateScreen>
}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	0800f0c8 	.word	0x0800f0c8
 80001b0:	080041ac 	.word	0x080041ac

080001b4 <ModeDisplay>:

void ModeDisplay(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(2, 8);
 80001ba:	2108      	movs	r1, #8
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 fed9 	bl	8000f74 <ssd1306_SetCursor>
	ssd1306_WriteString("                    ", Font_7x10, White);
 80001c2:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <ModeDisplay+0x44>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	9200      	str	r2, [sp, #0]
 80001c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001ca:	480c      	ldr	r0, [pc, #48]	; (80001fc <ModeDisplay+0x48>)
 80001cc:	f000 feac 	bl	8000f28 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 8);
 80001d0:	2108      	movs	r1, #8
 80001d2:	2002      	movs	r0, #2
 80001d4:	f000 fece 	bl	8000f74 <ssd1306_SetCursor>
	ssd1306_WriteString(modes[mode], Font_7x10, White);
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <ModeDisplay+0x4c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a09      	ldr	r2, [pc, #36]	; (8000204 <ModeDisplay+0x50>)
 80001de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <ModeDisplay+0x44>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	9200      	str	r2, [sp, #0]
 80001e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001ea:	f000 fe9d 	bl	8000f28 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80001ee:	f000 fd8f 	bl	8000d10 <ssd1306_UpdateScreen>
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	0800f0bc 	.word	0x0800f0bc
 80001fc:	080041b8 	.word	0x080041b8
 8000200:	20000244 	.word	0x20000244
 8000204:	20000004 	.word	0x20000004

08000208 <BulletsDisplay>:

void BulletsDisplay(){
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af02      	add	r7, sp, #8
	  ssd1306_SetCursor(24, 32);
 800020e:	2120      	movs	r1, #32
 8000210:	2018      	movs	r0, #24
 8000212:	f000 feaf 	bl	8000f74 <ssd1306_SetCursor>
	  ssd1306_WriteChar((bullets / 10) + 48, Font_16x26, White);
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <BulletsDisplay+0x74>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <BulletsDisplay+0x78>)
 800021c:	fb82 1203 	smull	r1, r2, r2, r3
 8000220:	1092      	asrs	r2, r2, #2
 8000222:	17db      	asrs	r3, r3, #31
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	b2db      	uxtb	r3, r3
 8000228:	3330      	adds	r3, #48	; 0x30
 800022a:	b2d8      	uxtb	r0, r3
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <BulletsDisplay+0x7c>)
 800022e:	2201      	movs	r2, #1
 8000230:	9200      	str	r2, [sp, #0]
 8000232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000234:	f000 fde6 	bl	8000e04 <ssd1306_WriteChar>
	  ssd1306_WriteChar((bullets % 10) + 48, Font_16x26, White);
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <BulletsDisplay+0x74>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b10      	ldr	r3, [pc, #64]	; (8000280 <BulletsDisplay+0x78>)
 800023e:	fb83 1302 	smull	r1, r3, r3, r2
 8000242:	1099      	asrs	r1, r3, #2
 8000244:	17d3      	asrs	r3, r2, #31
 8000246:	1ac9      	subs	r1, r1, r3
 8000248:	460b      	mov	r3, r1
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	440b      	add	r3, r1
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	1ad1      	subs	r1, r2, r3
 8000252:	b2cb      	uxtb	r3, r1
 8000254:	3330      	adds	r3, #48	; 0x30
 8000256:	b2d8      	uxtb	r0, r3
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <BulletsDisplay+0x7c>)
 800025a:	2201      	movs	r2, #1
 800025c:	9200      	str	r2, [sp, #0]
 800025e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000260:	f000 fdd0 	bl	8000e04 <ssd1306_WriteChar>
	  ssd1306_WriteString("/30", Font_16x26, White);
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <BulletsDisplay+0x7c>)
 8000266:	2201      	movs	r2, #1
 8000268:	9200      	str	r2, [sp, #0]
 800026a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800026c:	4806      	ldr	r0, [pc, #24]	; (8000288 <BulletsDisplay+0x80>)
 800026e:	f000 fe5b 	bl	8000f28 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000272:	f000 fd4d 	bl	8000d10 <ssd1306_UpdateScreen>
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000000 	.word	0x20000000
 8000280:	66666667 	.word	0x66666667
 8000284:	0800f0d4 	.word	0x0800f0d4
 8000288:	080041d0 	.word	0x080041d0

0800028c <OutOfAmmoEvent>:

void OutOfAmmoEvent(){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	  if (reloading) return;
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <OutOfAmmoEvent+0x58>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d122      	bne.n	80002de <OutOfAmmoEvent+0x52>
	  StartCounting(1000);
 8000298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029c:	f000 f86e 	bl	800037c <StartCounting>
	  if (out_of_ammo){
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <OutOfAmmoEvent+0x5c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00e      	beq.n	80002c6 <OutOfAmmoEvent+0x3a>
		  HAL_GPIO_WritePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ae:	480f      	ldr	r0, [pc, #60]	; (80002ec <OutOfAmmoEvent+0x60>)
 80002b0:	f001 fe3f 	bl	8001f32 <HAL_GPIO_WritePin>
		  PlaySound(out_of_ammo_sound, out_of_ammo_sound_length);
 80002b4:	f44f 53f3 	mov.w	r3, #7776	; 0x1e60
 80002b8:	4619      	mov	r1, r3
 80002ba:	480d      	ldr	r0, [pc, #52]	; (80002f0 <OutOfAmmoEvent+0x64>)
 80002bc:	f000 f81c 	bl	80002f8 <PlaySound>
		  ReloadMessage();
 80002c0:	f7ff ff44 	bl	800014c <ReloadMessage>
 80002c4:	e00c      	b.n	80002e0 <OutOfAmmoEvent+0x54>
	  }
	  else{
		  reloading = true;
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <OutOfAmmoEvent+0x58>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
		  PlaySound(reload_sound, reload_sound_length);
 80002cc:	f643 43ba 	movw	r3, #15546	; 0x3cba
 80002d0:	4619      	mov	r1, r3
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <OutOfAmmoEvent+0x68>)
 80002d4:	f000 f810 	bl	80002f8 <PlaySound>
		  ReloadingMessage();
 80002d8:	f7ff ff52 	bl	8000180 <ReloadingMessage>
 80002dc:	e000      	b.n	80002e0 <OutOfAmmoEvent+0x54>
	  if (reloading) return;
 80002de:	bf00      	nop
	  }
}
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000249 	.word	0x20000249
 80002e8:	20000248 	.word	0x20000248
 80002ec:	40010800 	.word	0x40010800
 80002f0:	080095a8 	.word	0x080095a8
 80002f4:	080058ec 	.word	0x080058ec

080002f8 <PlaySound>:

//Kich hoat am thanh
void PlaySound(const uint8_t audio_data[],const uint32_t audio_length)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
	HAL_DMA_Abort_IT(&hdma_tim3_ch4_up);
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <PlaySound+0x30>)
 8000304:	f001 face 	bl	80018a4 <HAL_DMA_Abort_IT>
	HAL_DMA_Start_IT(&hdma_tim3_ch4_up,(uint32_t)(audio_data+44),(uint32_t)&(TIM2->CCR1), audio_length);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	332c      	adds	r3, #44	; 0x2c
 800030c:	4619      	mov	r1, r3
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <PlaySound+0x34>)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <PlaySound+0x30>)
 8000314:	f001 fa66 	bl	80017e4 <HAL_DMA_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <PlaySound+0x38>)
 800031a:	f002 ff4d 	bl	80031b8 <HAL_TIM_Base_Start>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000200 	.word	0x20000200
 800032c:	40000034 	.word	0x40000034
 8000330:	20000170 	.word	0x20000170

08000334 <Timer_Delay_ms>:

//Ham delay bang timer 4
void Timer_Delay_ms(uint16_t ms){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <Timer_Delay_ms+0x44>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2200      	movs	r2, #0
 8000344:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_AUTORELOAD(&htim4, ms);// Reset counter
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <Timer_Delay_ms+0x44>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	88fa      	ldrh	r2, [r7, #6]
 800034c:	62da      	str	r2, [r3, #44]	; 0x2c
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <Timer_Delay_ms+0x44>)
 8000352:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start(&htim4);        // Bắt đầu timer
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <Timer_Delay_ms+0x44>)
 8000356:	f002 ff2f 	bl	80031b8 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim4) < ms);
 800035a:	bf00      	nop
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <Timer_Delay_ms+0x44>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	429a      	cmp	r2, r3
 8000366:	d3f9      	bcc.n	800035c <Timer_Delay_ms+0x28>
    HAL_TIM_Base_Stop(&htim4);         // Dừng timer sau khi xong
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <Timer_Delay_ms+0x44>)
 800036a:	f002 ff6f 	bl	800324c <HAL_TIM_Base_Stop>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200001b8 	.word	0x200001b8

0800037c <StartCounting>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
    __HAL_TIM_SET_AUTORELOAD(&htim1, ms);// Reset counter
    HAL_TIM_Base_Start_IT(&htim1);
}

void StartCounting(int ms){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
		__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <StartCounting+0x38>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f06f 0201 	mvn.w	r2, #1
 800038c:	611a      	str	r2, [r3, #16]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <StartCounting+0x38>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2200      	movs	r2, #0
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim1, ms);// Reset counter
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <StartCounting+0x38>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <StartCounting+0x38>)
 80003a2:	60d3      	str	r3, [r2, #12]
		HAL_TIM_Base_Start_IT(&htim1);
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <StartCounting+0x38>)
 80003a6:	f002 ff77 	bl	8003298 <HAL_TIM_Base_Start_IT>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000e0 	.word	0x200000e0

080003b8 <vibrate>:

//Ham tao rung
void vibrate(int ms){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c6:	4809      	ldr	r0, [pc, #36]	; (80003ec <vibrate+0x34>)
 80003c8:	f001 fdb3 	bl	8001f32 <HAL_GPIO_WritePin>
	  Timer_Delay_ms(ms);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ffaf 	bl	8000334 <Timer_Delay_ms>
	  HAL_GPIO_WritePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	4803      	ldr	r0, [pc, #12]	; (80003ec <vibrate+0x34>)
 80003de:	f001 fda8 	bl	8001f32 <HAL_GPIO_WritePin>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40010800 	.word	0x40010800

080003f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d119      	bne.n	8000436 <HAL_TIM_PeriodElapsedCallback+0x46>
    {
    	  ssd1306_Fill(Black);
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fc6c 	bl	8000ce0 <ssd1306_Fill>
		  ModeDisplay();
 8000408:	f7ff fed4 	bl	80001b4 <ModeDisplay>
		  BulletsDisplay();
 800040c:	f7ff fefc 	bl	8000208 <BulletsDisplay>
      if (!out_of_ammo){
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	f083 0301 	eor.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	d008      	beq.n	8000430 <HAL_TIM_PeriodElapsedCallback+0x40>
		  HAL_GPIO_WritePin(VIBRATION_MOTOR_GPIO_Port, VIBRATION_MOTOR_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000426:	f001 fd84 	bl	8001f32 <HAL_GPIO_WritePin>
    	  reloading = false;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
      }
      HAL_TIM_Base_Stop_IT(htim);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f002 ff83 	bl	800333c <HAL_TIM_Base_Stop_IT>
    }
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40012c00 	.word	0x40012c00
 8000444:	20000248 	.word	0x20000248
 8000448:	40010800 	.word	0x40010800
 800044c:	20000249 	.word	0x20000249

08000450 <HAL_GPIO_EXTI_Callback>:
    }
}

//Ham ngat khi nhan nut
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 800045a:	f001 f82d 	bl	80014b8 <HAL_GetTick>
 800045e:	60b8      	str	r0, [r7, #8]

	    if (now - last_button_press_time < DEBOUNCE_DELAY_MS) {
 8000460:	4b6f      	ldr	r3, [pc, #444]	; (8000620 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	2bc7      	cmp	r3, #199	; 0xc7
 800046a:	f240 80d1 	bls.w	8000610 <HAL_GPIO_EXTI_Callback+0x1c0>
	        return;
	    }

	    last_button_press_time = now;
 800046e:	4a6c      	ldr	r2, [pc, #432]	; (8000620 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	6013      	str	r3, [r2, #0]
	if (reloading) return;
 8000474:	4b6b      	ldr	r3, [pc, #428]	; (8000624 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	f040 80cb 	bne.w	8000614 <HAL_GPIO_EXTI_Callback+0x1c4>
	if (GPIO_Pin == LASER_TRIGGER_Pin){
 800047e:	88fb      	ldrh	r3, [r7, #6]
 8000480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000484:	f040 8098 	bne.w	80005b8 <HAL_GPIO_EXTI_Callback+0x168>
		if(!out_of_ammo){
 8000488:	4b67      	ldr	r3, [pc, #412]	; (8000628 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	f083 0301 	eor.w	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	f000 808d 	beq.w	80005b2 <HAL_GPIO_EXTI_Callback+0x162>
			switch (mode){
 8000498:	4b64      	ldr	r3, [pc, #400]	; (800062c <HAL_GPIO_EXTI_Callback+0x1dc>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d059      	beq.n	8000554 <HAL_GPIO_EXTI_Callback+0x104>
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	f300 80ba 	bgt.w	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <HAL_GPIO_EXTI_Callback+0x60>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d049      	beq.n	8000542 <HAL_GPIO_EXTI_Callback+0xf2>
 80004ae:	e0b4      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
			  case 0:
				  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 80004b0:	2102      	movs	r1, #2
 80004b2:	485f      	ldr	r0, [pc, #380]	; (8000630 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80004b4:	f001 fd55 	bl	8001f62 <HAL_GPIO_TogglePin>
				  vibrate(50);
 80004b8:	2032      	movs	r0, #50	; 0x32
 80004ba:	f7ff ff7d 	bl	80003b8 <vibrate>
				  PlaySound(shoot_sound, shoot_sound_length);
 80004be:	f241 7318 	movw	r3, #5912	; 0x1718
 80004c2:	4619      	mov	r1, r3
 80004c4:	485b      	ldr	r0, [pc, #364]	; (8000634 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80004c6:	f7ff ff17 	bl	80002f8 <PlaySound>
				  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 80004ca:	2102      	movs	r1, #2
 80004cc:	4858      	ldr	r0, [pc, #352]	; (8000630 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80004ce:	f001 fd48 	bl	8001f62 <HAL_GPIO_TogglePin>
				  bullets--;
 80004d2:	4b59      	ldr	r3, [pc, #356]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a57      	ldr	r2, [pc, #348]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80004da:	6013      	str	r3, [r2, #0]
				  BulletsDisplay();
 80004dc:	f7ff fe94 	bl	8000208 <BulletsDisplay>
				  if (bullets == 0){
 80004e0:	4b55      	ldr	r3, [pc, #340]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	f040 8097 	bne.w	8000618 <HAL_GPIO_EXTI_Callback+0x1c8>
					  out_of_ammo = true;
 80004ea:	4b4f      	ldr	r3, [pc, #316]	; (8000628 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]
					  OutOfAmmoEvent();
 80004f0:	f7ff fecc 	bl	800028c <OutOfAmmoEvent>
				  }
				  break;
 80004f4:	e090      	b.n	8000618 <HAL_GPIO_EXTI_Callback+0x1c8>
			  case 1:
				  //Mode 2: auto shot
				  while(HAL_GPIO_ReadPin(LASER_TRIGGER_GPIO_Port, LASER_TRIGGER_Pin) == 1){
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 80004f6:	2102      	movs	r1, #2
 80004f8:	484d      	ldr	r0, [pc, #308]	; (8000630 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80004fa:	f001 fd32 	bl	8001f62 <HAL_GPIO_TogglePin>
					  vibrate(50);
 80004fe:	2032      	movs	r0, #50	; 0x32
 8000500:	f7ff ff5a 	bl	80003b8 <vibrate>
					  PlaySound(shoot_sound, shoot_sound_length);
 8000504:	f241 7318 	movw	r3, #5912	; 0x1718
 8000508:	4619      	mov	r1, r3
 800050a:	484a      	ldr	r0, [pc, #296]	; (8000634 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800050c:	f7ff fef4 	bl	80002f8 <PlaySound>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 8000510:	2102      	movs	r1, #2
 8000512:	4847      	ldr	r0, [pc, #284]	; (8000630 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000514:	f001 fd25 	bl	8001f62 <HAL_GPIO_TogglePin>
					  Timer_Delay_ms(50);
 8000518:	2032      	movs	r0, #50	; 0x32
 800051a:	f7ff ff0b 	bl	8000334 <Timer_Delay_ms>
					  bullets--;
 800051e:	4b46      	ldr	r3, [pc, #280]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	4a44      	ldr	r2, [pc, #272]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000526:	6013      	str	r3, [r2, #0]
					  BulletsDisplay();
 8000528:	f7ff fe6e 	bl	8000208 <BulletsDisplay>
					  if (bullets == 0){
 800052c:	4b42      	ldr	r3, [pc, #264]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d106      	bne.n	8000542 <HAL_GPIO_EXTI_Callback+0xf2>
						  out_of_ammo = true;
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
						  OutOfAmmoEvent();
 800053a:	f7ff fea7 	bl	800028c <OutOfAmmoEvent>
						  break;
 800053e:	bf00      	nop
					  }
				  }
				  break;
 8000540:	e06b      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
				  while(HAL_GPIO_ReadPin(LASER_TRIGGER_GPIO_Port, LASER_TRIGGER_Pin) == 1){
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	483d      	ldr	r0, [pc, #244]	; (800063c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000548:	f001 fcdc 	bl	8001f04 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d0d1      	beq.n	80004f6 <HAL_GPIO_EXTI_Callback+0xa6>
				  break;
 8000552:	e062      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
			  case 2:
				  //Mode 3: burst
				  for (int i = 0; i < 3; i++){
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e027      	b.n	80005aa <HAL_GPIO_EXTI_Callback+0x15a>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 800055a:	2102      	movs	r1, #2
 800055c:	4834      	ldr	r0, [pc, #208]	; (8000630 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800055e:	f001 fd00 	bl	8001f62 <HAL_GPIO_TogglePin>
					  vibrate(50);
 8000562:	2032      	movs	r0, #50	; 0x32
 8000564:	f7ff ff28 	bl	80003b8 <vibrate>
					  PlaySound(shoot_sound, shoot_sound_length);
 8000568:	f241 7318 	movw	r3, #5912	; 0x1718
 800056c:	4619      	mov	r1, r3
 800056e:	4831      	ldr	r0, [pc, #196]	; (8000634 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000570:	f7ff fec2 	bl	80002f8 <PlaySound>
					  HAL_GPIO_TogglePin(LASER_GPIO_Port, LASER_Pin);
 8000574:	2102      	movs	r1, #2
 8000576:	482e      	ldr	r0, [pc, #184]	; (8000630 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000578:	f001 fcf3 	bl	8001f62 <HAL_GPIO_TogglePin>
					  Timer_Delay_ms(50);
 800057c:	2032      	movs	r0, #50	; 0x32
 800057e:	f7ff fed9 	bl	8000334 <Timer_Delay_ms>
					  bullets--;
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a2b      	ldr	r2, [pc, #172]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800058a:	6013      	str	r3, [r2, #0]
					  BulletsDisplay();
 800058c:	f7ff fe3c 	bl	8000208 <BulletsDisplay>
					  if (bullets == 0){
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d105      	bne.n	80005a4 <HAL_GPIO_EXTI_Callback+0x154>
						  out_of_ammo = true;
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
						  OutOfAmmoEvent();
 800059e:	f7ff fe75 	bl	800028c <OutOfAmmoEvent>
						  break;
 80005a2:	e03a      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
				  for (int i = 0; i < 3; i++){
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	ddd4      	ble.n	800055a <HAL_GPIO_EXTI_Callback+0x10a>
 80005b0:	e033      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
					  }
				  }
			}
		}
		else{
			  OutOfAmmoEvent();
 80005b2:	f7ff fe6b 	bl	800028c <OutOfAmmoEvent>
 80005b6:	e030      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
		}
	}
	else if (GPIO_Pin == MODE_TRIGGER_Pin){
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005be:	d114      	bne.n	80005ea <HAL_GPIO_EXTI_Callback+0x19a>
		  mode++;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80005c8:	6013      	str	r3, [r2, #0]
		  if (mode > 2) mode = 0;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	dd02      	ble.n	80005d8 <HAL_GPIO_EXTI_Callback+0x188>
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
		  PlaySound(switch_sound, switch_sound_length);
 80005d8:	f241 439e 	movw	r3, #5278	; 0x149e
 80005dc:	4619      	mov	r1, r3
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80005e0:	f7ff fe8a 	bl	80002f8 <PlaySound>
		  ModeDisplay();
 80005e4:	f7ff fde6 	bl	80001b4 <ModeDisplay>
 80005e8:	e017      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
	}
	else if (GPIO_Pin == RELOAD_TRIGGER_Pin){
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f0:	d10c      	bne.n	800060c <HAL_GPIO_EXTI_Callback+0x1bc>

		if (bullets < 30){
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b1d      	cmp	r3, #29
 80005f8:	dc0f      	bgt.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
			bullets = 30;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80005fc:	221e      	movs	r2, #30
 80005fe:	601a      	str	r2, [r3, #0]
			out_of_ammo = false;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
			OutOfAmmoEvent();
 8000606:	f7ff fe41 	bl	800028c <OutOfAmmoEvent>
 800060a:	e006      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
		}
	}
	else{
		__NOP();
 800060c:	bf00      	nop
 800060e:	e004      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
	        return;
 8000610:	bf00      	nop
 8000612:	e002      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
	if (reloading) return;
 8000614:	bf00      	nop
 8000616:	e000      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x1ca>
				  break;
 8000618:	bf00      	nop
	}
}
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000024c 	.word	0x2000024c
 8000624:	20000249 	.word	0x20000249
 8000628:	20000248 	.word	0x20000248
 800062c:	20000244 	.word	0x20000244
 8000630:	40010800 	.word	0x40010800
 8000634:	080041d4 	.word	0x080041d4
 8000638:	20000000 	.word	0x20000000
 800063c:	40010c00 	.word	0x40010c00
 8000640:	0800b408 	.word	0x0800b408

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fede 	bl	8001408 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f81a 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 fa3a 	bl	8000ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000654:	f000 fa1a 	bl	8000a8c <MX_DMA_Init>
  MX_TIM1_Init();
 8000658:	f000 f8ac 	bl	80007b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800065c:	f000 f8fc 	bl	8000858 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000660:	f000 f972 	bl	8000948 <MX_TIM3_Init>
  MX_I2C2_Init();
 8000664:	f000 f878 	bl	8000758 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000668:	f000 f9c2 	bl	80009f0 <MX_TIM4_Init>
  MX_I2C1_Init();
 800066c:	f000 f846 	bl	80006fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000670:	f000 facc 	bl	8000c0c <ssd1306_Init>
  ssd1306_Fill(Black);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fb33 	bl	8000ce0 <ssd1306_Fill>
  ModeDisplay();
 800067a:	f7ff fd9b 	bl	80001b4 <ModeDisplay>
  BulletsDisplay();
 800067e:	f7ff fdc3 	bl	8000208 <BulletsDisplay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x3e>

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b090      	sub	sp, #64	; 0x40
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2228      	movs	r2, #40	; 0x28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fd38 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2310      	movs	r3, #16
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 f92e 	bl	800291c <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006c6:	f000 fa63 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fb9b 	bl	8002e20 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80006f0:	f000 fa4e 	bl	8000b90 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3740      	adds	r7, #64	; 0x40
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f001 fc43 	bl	8001fc4 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 fa24 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000038 	.word	0x20000038
 8000750:	40005400 	.word	0x40005400
 8000754:	00061a80 	.word	0x00061a80

08000758 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C2_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C2_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C2_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C2_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C2_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C2_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C2_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C2_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C2_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C2_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C2_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C2_Init+0x50>)
 8000796:	f001 fc15 	bl	8001fc4 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f9f6 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	40005800 	.word	0x40005800
 80007b0:	00061a80 	.word	0x00061a80

080007b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_TIM1_Init+0xa0>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007d8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_TIM1_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_TIM1_Init+0x9c>)
 8000800:	f002 fc8a 	bl	8003118 <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800080a:	f000 f9c1 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4619      	mov	r1, r3
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_TIM1_Init+0x9c>)
 800081c:	f003 f868 	bl	80038f0 <HAL_TIM_ConfigClockSource>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000826:	f000 f9b3 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_TIM1_Init+0x9c>)
 8000838:	f003 fbf6 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 f9a5 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e0 	.word	0x200000e0
 8000854:	40012c00 	.word	0x40012c00

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_TIM2_Init+0xec>)
 800088a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_TIM2_Init+0xec>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_TIM2_Init+0xec>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_TIM2_Init+0xec>)
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_TIM2_Init+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_TIM2_Init+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ae:	4825      	ldr	r0, [pc, #148]	; (8000944 <MX_TIM2_Init+0xec>)
 80008b0:	f002 fc32 	bl	8003118 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80008ba:	f000 f969 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c8:	4619      	mov	r1, r3
 80008ca:	481e      	ldr	r0, [pc, #120]	; (8000944 <MX_TIM2_Init+0xec>)
 80008cc:	f003 f810 	bl	80038f0 <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80008d6:	f000 f95b 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008da:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_TIM2_Init+0xec>)
 80008dc:	f002 fd5c 	bl	8003398 <HAL_TIM_PWM_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80008e6:	f000 f953 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	4619      	mov	r1, r3
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <MX_TIM2_Init+0xec>)
 80008fa:	f003 fb95 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000904:	f000 f944 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_TIM2_Init+0xec>)
 8000920:	f002 ff24 	bl	800376c <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800092a:	f000 f931 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //cho phep PWM (gia lap DAC)
 800092e:	2100      	movs	r1, #0
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_TIM2_Init+0xec>)
 8000932:	f002 fd89 	bl	8003448 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM2_Init+0xec>)
 8000938:	f000 fc9e 	bl	8001278 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3738      	adds	r7, #56	; 0x38
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000128 	.word	0x20000128

08000948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_TIM3_Init+0xa0>)
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_TIM3_Init+0xa4>)
 8000968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4 - 1;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_TIM3_Init+0xa0>)
 800096c:	2203      	movs	r2, #3
 800096e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_TIM3_Init+0xa0>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125 - 1;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_TIM3_Init+0xa0>)
 8000978:	227c      	movs	r2, #124	; 0x7c
 800097a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM3_Init+0xa0>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM3_Init+0xa0>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000988:	4817      	ldr	r0, [pc, #92]	; (80009e8 <MX_TIM3_Init+0xa0>)
 800098a:	f002 fbc5 	bl	8003118 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000994:	f000 f8fc 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4619      	mov	r1, r3
 80009a4:	4810      	ldr	r0, [pc, #64]	; (80009e8 <MX_TIM3_Init+0xa0>)
 80009a6:	f002 ffa3 	bl	80038f0 <HAL_TIM_ConfigClockSource>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80009b0:	f000 f8ee 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_TIM3_Init+0xa0>)
 80009c2:	f003 fb31 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009cc:	f000 f8e0 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // Kích hoạt DMA trên Timer Update Event
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_UPDATE); //Kich hoat DMA
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_TIM3_Init+0xa0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <MX_TIM3_Init+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009de:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM3_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000170 	.word	0x20000170
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <MX_TIM4_Init+0x98>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a36:	f002 fb6f 	bl	8003118 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a40:	f000 f8a6 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a52:	f002 ff4d 	bl	80038f0 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 f898 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_TIM4_Init+0x94>)
 8000a6e:	f003 fadb 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f88a 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200001b8 	.word	0x200001b8
 8000a88:	40000800 	.word	0x40000800

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_DMA_Init+0x38>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <MX_DMA_Init+0x38>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_DMA_Init+0x38>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	200d      	movs	r0, #13
 8000ab0:	f000 fe07 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ab4:	200d      	movs	r0, #13
 8000ab6:	f000 fe20 	bl	80016fa <HAL_NVIC_EnableIRQ>

}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000ae2:	f043 0320 	orr.w	r3, r3, #32
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LASER_Pin|VIBRATION_MOTOR_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f240 2102 	movw	r1, #514	; 0x202
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_GPIO_Init+0xbc>)
 8000b2c:	f001 fa01 	bl	8001f32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LASER_Pin VIBRATION_MOTOR_Pin */
  GPIO_InitStruct.Pin = LASER_Pin|VIBRATION_MOTOR_Pin;
 8000b30:	f240 2302 	movw	r3, #514	; 0x202
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <MX_GPIO_Init+0xbc>)
 8000b4a:	f001 f857 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_TRIGGER_Pin LASER_TRIGGER_Pin RELOAD_TRIGGER_Pin */
  GPIO_InitStruct.Pin = MODE_TRIGGER_Pin|LASER_TRIGGER_Pin|RELOAD_TRIGGER_Pin;
 8000b4e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_GPIO_Init+0xc0>)
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <MX_GPIO_Init+0xc4>)
 8000b64:	f001 f84a 	bl	8001bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2028      	movs	r0, #40	; 0x28
 8000b6e:	f000 fda8 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b72:	2028      	movs	r0, #40	; 0x28
 8000b74:	f000 fdc1 	bl	80016fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010800 	.word	0x40010800
 8000b88:	10110000 	.word	0x10110000
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>

08000b9a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
	...

08000ba8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2178      	movs	r1, #120	; 0x78
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <ssd1306_WriteCommand+0x2c>)
 8000bc8:	f001 fb40 	bl	800224c <HAL_I2C_Mem_Write>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000038 	.word	0x20000038

08000bd8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bea:	9202      	str	r2, [sp, #8]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2178      	movs	r1, #120	; 0x78
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <ssd1306_WriteData+0x30>)
 8000bfa:	f001 fb27 	bl	800224c <HAL_I2C_Mem_Write>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000038 	.word	0x20000038

08000c0c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000c10:	f7ff ffc3 	bl	8000b9a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c14:	2064      	movs	r0, #100	; 0x64
 8000c16:	f000 fc59 	bl	80014cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f9d6 	bl	8000fcc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c20:	2020      	movs	r0, #32
 8000c22:	f7ff ffc1 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ffbe 	bl	8000ba8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c2c:	20b0      	movs	r0, #176	; 0xb0
 8000c2e:	f7ff ffbb 	bl	8000ba8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c32:	20c8      	movs	r0, #200	; 0xc8
 8000c34:	f7ff ffb8 	bl	8000ba8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff ffb5 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f7ff ffb2 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c44:	2040      	movs	r0, #64	; 0x40
 8000c46:	f7ff ffaf 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c4a:	20ff      	movs	r0, #255	; 0xff
 8000c4c:	f000 f9aa 	bl	8000fa4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c50:	20a1      	movs	r0, #161	; 0xa1
 8000c52:	f7ff ffa9 	bl	8000ba8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c56:	20a6      	movs	r0, #166	; 0xa6
 8000c58:	f7ff ffa6 	bl	8000ba8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c5c:	20a8      	movs	r0, #168	; 0xa8
 8000c5e:	f7ff ffa3 	bl	8000ba8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c62:	203f      	movs	r0, #63	; 0x3f
 8000c64:	f7ff ffa0 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c68:	20a4      	movs	r0, #164	; 0xa4
 8000c6a:	f7ff ff9d 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c6e:	20d3      	movs	r0, #211	; 0xd3
 8000c70:	f7ff ff9a 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ff97 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c7a:	20d5      	movs	r0, #213	; 0xd5
 8000c7c:	f7ff ff94 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c80:	20f0      	movs	r0, #240	; 0xf0
 8000c82:	f7ff ff91 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c86:	20d9      	movs	r0, #217	; 0xd9
 8000c88:	f7ff ff8e 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c8c:	2022      	movs	r0, #34	; 0x22
 8000c8e:	f7ff ff8b 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c92:	20da      	movs	r0, #218	; 0xda
 8000c94:	f7ff ff88 	bl	8000ba8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c98:	2012      	movs	r0, #18
 8000c9a:	f7ff ff85 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c9e:	20db      	movs	r0, #219	; 0xdb
 8000ca0:	f7ff ff82 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f7ff ff7f 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000caa:	208d      	movs	r0, #141	; 0x8d
 8000cac:	f7ff ff7c 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f7ff ff79 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 f988 	bl	8000fcc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80f 	bl	8000ce0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000cc2:	f000 f825 	bl	8000d10 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <ssd1306_Init+0xd0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <ssd1306_Init+0xd0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <ssd1306_Init+0xd0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	711a      	strb	r2, [r3, #4]
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000650 	.word	0x20000650

08000ce0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <ssd1306_Fill+0x14>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e000      	b.n	8000cf6 <ssd1306_Fill+0x16>
 8000cf4:	23ff      	movs	r3, #255	; 0xff
 8000cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <ssd1306_Fill+0x2c>)
 8000cfe:	f003 fa03 	bl	8004108 <memset>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000250 	.word	0x20000250

08000d10 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	e016      	b.n	8000d4a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	3b50      	subs	r3, #80	; 0x50
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff40 	bl	8000ba8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ff3d 	bl	8000ba8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f7ff ff3a 	bl	8000ba8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <ssd1306_UpdateScreen+0x4c>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff4a 	bl	8000bd8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3301      	adds	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d9e5      	bls.n	8000d1c <ssd1306_UpdateScreen+0xc>
    }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000250 	.word	0x20000250

08000d60 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db3d      	blt.n	8000df6 <ssd1306_DrawPixel+0x96>
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7e:	d83a      	bhi.n	8000df6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11a      	bne.n	8000dbc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	4413      	add	r3, r2
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <ssd1306_DrawPixel+0xa0>)
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b259      	sxtb	r1, r3
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	4603      	mov	r3, r0
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	4413      	add	r3, r2
 8000db4:	b2c9      	uxtb	r1, r1
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <ssd1306_DrawPixel+0xa0>)
 8000db8:	54d1      	strb	r1, [r2, r3]
 8000dba:	e01d      	b.n	8000df8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b2d8      	uxtb	r0, r3
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <ssd1306_DrawPixel+0xa0>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	4013      	ands	r3, r2
 8000de4:	b259      	sxtb	r1, r3
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	4603      	mov	r3, r0
 8000dea:	01db      	lsls	r3, r3, #7
 8000dec:	4413      	add	r3, r2
 8000dee:	b2c9      	uxtb	r1, r1
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <ssd1306_DrawPixel+0xa0>)
 8000df2:	54d1      	strb	r1, [r2, r3]
 8000df4:	e000      	b.n	8000df8 <ssd1306_DrawPixel+0x98>
        return;
 8000df6:	bf00      	nop
    }
}
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000250 	.word	0x20000250

08000e04 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e12:	4623      	mov	r3, r4
 8000e14:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b1f      	cmp	r3, #31
 8000e1a:	d902      	bls.n	8000e22 <ssd1306_WriteChar+0x1e>
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b7e      	cmp	r3, #126	; 0x7e
 8000e20:	d901      	bls.n	8000e26 <ssd1306_WriteChar+0x22>
        return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e079      	b.n	8000f1a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <ssd1306_WriteChar+0x34>
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	3b20      	subs	r3, #32
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	e000      	b.n	8000e3a <ssd1306_WriteChar+0x36>
 8000e38:	783b      	ldrb	r3, [r7, #0]
 8000e3a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	4413      	add	r3, r2
 8000e46:	2b80      	cmp	r3, #128	; 0x80
 8000e48:	dc06      	bgt.n	8000e58 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000e54:	2b40      	cmp	r3, #64	; 0x40
 8000e56:	dd01      	ble.n	8000e5c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e05e      	b.n	8000f1a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	e04d      	b.n	8000efe <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	3b20      	subs	r3, #32
 8000e68:	7879      	ldrb	r1, [r7, #1]
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	440b      	add	r3, r1
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	e036      	b.n	8000ef0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d013      	beq.n	8000eba <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2d8      	uxtb	r0, r3
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000ea2:	885b      	ldrh	r3, [r3, #2]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff ff54 	bl	8000d60 <ssd1306_DrawPixel>
 8000eb8:	e017      	b.n	8000eea <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b2d8      	uxtb	r0, r3
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000eca:	885b      	ldrh	r3, [r3, #2]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b2d9      	uxtb	r1, r3
 8000ed6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f7ff ff3b 	bl	8000d60 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3c4      	bcc.n	8000e82 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	461a      	mov	r2, r3
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d3ac      	bcc.n	8000e62 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <ssd1306_WriteChar+0x120>)
 8000f16:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000650 	.word	0x20000650

08000f28 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	4638      	mov	r0, r7
 8000f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000f36:	e013      	b.n	8000f60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	7818      	ldrb	r0, [r3, #0]
 8000f3c:	7e3b      	ldrb	r3, [r7, #24]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	463b      	mov	r3, r7
 8000f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f44:	f7ff ff5e 	bl	8000e04 <ssd1306_WriteChar>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d002      	beq.n	8000f5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	e008      	b.n	8000f6c <ssd1306_WriteString+0x44>
        }
        str++;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e7      	bne.n	8000f38 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <ssd1306_SetCursor+0x2c>)
 8000f8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <ssd1306_SetCursor+0x2c>)
 8000f92:	805a      	strh	r2, [r3, #2]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000650 	.word	0x20000650

08000fa4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fae:	2381      	movs	r3, #129	; 0x81
 8000fb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fdf7 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fdf3 	bl	8000ba8 <ssd1306_WriteCommand>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000fdc:	23af      	movs	r3, #175	; 0xaf
 8000fde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <ssd1306_SetDisplayOn+0x38>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	715a      	strb	r2, [r3, #5]
 8000fe6:	e004      	b.n	8000ff2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000fe8:	23ae      	movs	r3, #174	; 0xae
 8000fea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <ssd1306_SetDisplayOn+0x38>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fdd7 	bl	8000ba8 <ssd1306_WriteCommand>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000650 	.word	0x20000650

08001008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_MspInit+0x5c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x5c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x60>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_MspInit+0x60>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <HAL_I2C_MspInit+0xc8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d124      	bne.n	80010d6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a29      	ldr	r2, [pc, #164]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a8:	2312      	movs	r3, #18
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4821      	ldr	r0, [pc, #132]	; (800113c <HAL_I2C_MspInit+0xd0>)
 80010b8:	f000 fda0 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c6:	61d3      	str	r3, [r2, #28]
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010d4:	e029      	b.n	800112a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_I2C_MspInit+0xd4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d124      	bne.n	800112a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4619      	mov	r1, r3
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_I2C_MspInit+0xd0>)
 800110e:	f000 fd75 	bl	8001bfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_I2C_MspInit+0xcc>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40005400 	.word	0x40005400
 8001138:	40021000 	.word	0x40021000
 800113c:	40010c00 	.word	0x40010c00
 8001140:	40005800 	.word	0x40005800

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a43      	ldr	r2, [pc, #268]	; (8001260 <HAL_TIM_Base_MspInit+0x11c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d114      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 800115c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b40      	ldr	r3, [pc, #256]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2019      	movs	r0, #25
 8001174:	f000 faa5 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001178:	2019      	movs	r0, #25
 800117a:	f000 fabe 	bl	80016fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800117e:	e06a      	b.n	8001256 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d10c      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a35      	ldr	r2, [pc, #212]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
}
 80011a2:	e058      	b.n	8001256 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <HAL_TIM_Base_MspInit+0x124>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d13a      	bne.n	8001224 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011c8:	4a29      	ldr	r2, [pc, #164]	; (8001270 <HAL_TIM_Base_MspInit+0x12c>)
 80011ca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011ce:	2210      	movs	r2, #16
 80011d0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011f4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80011fa:	481c      	ldr	r0, [pc, #112]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 80011fc:	f000 fa98 	bl	8001730 <HAL_DMA_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_TIM_Base_MspInit+0xc6>
      Error_Handler();
 8001206:	f7ff fcc3 	bl	8000b90 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 800121a:	621a      	str	r2, [r3, #32]
 800121c:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_TIM_Base_MspInit+0x128>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001222:	e018      	b.n	8001256 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <HAL_TIM_Base_MspInit+0x130>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_TIM_Base_MspInit+0x120>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201e      	movs	r0, #30
 800124c:	f000 fa39 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001250:	201e      	movs	r0, #30
 8001252:	f000 fa52 	bl	80016fa <HAL_NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40012c00 	.word	0x40012c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40000400 	.word	0x40000400
 800126c:	20000200 	.word	0x20000200
 8001270:	40020030 	.word	0x40020030
 8001274:	40000800 	.word	0x40000800

08001278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001296:	d12a      	bne.n	80012ee <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_TIM_MspPostInit+0x80>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_TIM_MspPostInit+0x80>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_TIM_MspPostInit+0x80>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 80012b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <HAL_TIM_MspPostInit+0x84>)
 80012c6:	f000 fc99 	bl	8001bfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_TIM_MspPostInit+0x88>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	4a05      	ldr	r2, [pc, #20]	; (8001300 <HAL_TIM_MspPostInit+0x88>)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010000 	.word	0x40010000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f8a3 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA1_Channel3_IRQHandler+0x10>)
 800135a:	f000 fb1b 	bl	8001994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000200 	.word	0x20000200

08001368 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM1_UP_IRQHandler+0x10>)
 800136e:	f002 f90d 	bl	800358c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000e0 	.word	0x200000e0

0800137c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM4_IRQHandler+0x10>)
 8001382:	f002 f903 	bl	800358c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001b8 	.word	0x200001b8

08001390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_TRIGGER_Pin);
 8001394:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001398:	f000 fdfc 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LASER_TRIGGER_Pin);
 800139c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a0:	f000 fdf8 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RELOAD_TRIGGER_Pin);
 80013a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013a8:	f000 fdf4 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013bc:	f7ff fff8 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013d8:	4c09      	ldr	r4, [pc, #36]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f002 fe97 	bl	8004118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ea:	f7ff f92b 	bl	8000644 <main>
  bx lr
 80013ee:	4770      	bx	lr
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80013f8:	0800f114 	.word	0x0800f114
  ldr r2, =_sbss
 80013fc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001400:	2000065c 	.word	0x2000065c

08001404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_2_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x28>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x28>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f947 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	200f      	movs	r0, #15
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fdf0 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40022000 	.word	0x40022000

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f95f 	bl	8001716 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f927 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000010 	.word	0x20000010
 800148c:	20000018 	.word	0x20000018
 8001490:	20000014 	.word	0x20000014

08001494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x1c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x20>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_IncTick+0x20>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	20000018 	.word	0x20000018
 80014b4:	20000658 	.word	0x20000658

080014b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <HAL_GetTick+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000658 	.word	0x20000658

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff fff0 	bl	80014b8 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffe0 	bl	80014b8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000018 	.word	0x20000018

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4906      	ldr	r1, [pc, #24]	; (80015ac <__NVIC_EnableIRQ+0x34>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ff90 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff2d 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff42 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff90 	bl	8001604 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5f 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff35 	bl	8001578 <__NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e043      	b.n	80017ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_DMA_Init+0xa8>)
 800174e:	4413      	add	r3, r2
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Init+0xac>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_DMA_Init+0xb0>)
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800177a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800177e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	bffdfff8 	.word	0xbffdfff8
 80017dc:	cccccccd 	.word	0xcccccccd
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_DMA_Start_IT+0x20>
 8001800:	2302      	movs	r3, #2
 8001802:	e04b      	b.n	800189c <HAL_DMA_Start_IT+0xb8>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d13a      	bne.n	800188e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f9af 	bl	8001ba0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 020e 	orr.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e00f      	b.n	800187c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0204 	bic.w	r2, r2, #4
 800186a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 020a 	orr.w	r2, r2, #10
 800187a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e005      	b.n	800189a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001896:	2302      	movs	r3, #2
 8001898:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d005      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e051      	b.n	800196c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_DMA_Abort_IT+0xd4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d029      	beq.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_DMA_Abort_IT+0xd8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d022      	beq.n	8001942 <HAL_DMA_Abort_IT+0x9e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_DMA_Abort_IT+0xdc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01a      	beq.n	800193c <HAL_DMA_Abort_IT+0x98>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_DMA_Abort_IT+0xe0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d012      	beq.n	8001936 <HAL_DMA_Abort_IT+0x92>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_DMA_Abort_IT+0xe4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00a      	beq.n	8001930 <HAL_DMA_Abort_IT+0x8c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1b      	ldr	r2, [pc, #108]	; (800198c <HAL_DMA_Abort_IT+0xe8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d102      	bne.n	800192a <HAL_DMA_Abort_IT+0x86>
 8001924:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001928:	e00e      	b.n	8001948 <HAL_DMA_Abort_IT+0xa4>
 800192a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800192e:	e00b      	b.n	8001948 <HAL_DMA_Abort_IT+0xa4>
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	e008      	b.n	8001948 <HAL_DMA_Abort_IT+0xa4>
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	e005      	b.n	8001948 <HAL_DMA_Abort_IT+0xa4>
 800193c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001940:	e002      	b.n	8001948 <HAL_DMA_Abort_IT+0xa4>
 8001942:	2310      	movs	r3, #16
 8001944:	e000      	b.n	8001948 <HAL_DMA_Abort_IT+0xa4>
 8001946:	2301      	movs	r3, #1
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_DMA_Abort_IT+0xec>)
 800194a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    } 
  }
  return status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020008 	.word	0x40020008
 800197c:	4002001c 	.word	0x4002001c
 8001980:	40020030 	.word	0x40020030
 8001984:	40020044 	.word	0x40020044
 8001988:	40020058 	.word	0x40020058
 800198c:	4002006c 	.word	0x4002006c
 8001990:	40020000 	.word	0x40020000

08001994 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	2204      	movs	r2, #4
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d04f      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xc8>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d04a      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_DMA_IRQHandler+0x1f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d029      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xae>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a65      	ldr	r2, [pc, #404]	; (8001b88 <HAL_DMA_IRQHandler+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xaa>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a63      	ldr	r2, [pc, #396]	; (8001b8c <HAL_DMA_IRQHandler+0x1f8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01a      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xa4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a62      	ldr	r2, [pc, #392]	; (8001b90 <HAL_DMA_IRQHandler+0x1fc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x9e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a60      	ldr	r2, [pc, #384]	; (8001b94 <HAL_DMA_IRQHandler+0x200>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x98>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a5f      	ldr	r2, [pc, #380]	; (8001b98 <HAL_DMA_IRQHandler+0x204>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <HAL_DMA_IRQHandler+0x92>
 8001a20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a24:	e00e      	b.n	8001a44 <HAL_DMA_IRQHandler+0xb0>
 8001a26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a2a:	e00b      	b.n	8001a44 <HAL_DMA_IRQHandler+0xb0>
 8001a2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a30:	e008      	b.n	8001a44 <HAL_DMA_IRQHandler+0xb0>
 8001a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a36:	e005      	b.n	8001a44 <HAL_DMA_IRQHandler+0xb0>
 8001a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3c:	e002      	b.n	8001a44 <HAL_DMA_IRQHandler+0xb0>
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	e000      	b.n	8001a44 <HAL_DMA_IRQHandler+0xb0>
 8001a42:	2304      	movs	r3, #4
 8001a44:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_DMA_IRQHandler+0x208>)
 8001a46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8094 	beq.w	8001b7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a5a:	e08e      	b.n	8001b7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	2202      	movs	r2, #2
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d056      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x186>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d051      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10b      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020a 	bic.w	r2, r2, #10
 8001a92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <HAL_DMA_IRQHandler+0x1f0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d029      	beq.n	8001afa <HAL_DMA_IRQHandler+0x166>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a37      	ldr	r2, [pc, #220]	; (8001b88 <HAL_DMA_IRQHandler+0x1f4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x162>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <HAL_DMA_IRQHandler+0x1f8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x15c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_DMA_IRQHandler+0x1fc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d012      	beq.n	8001aea <HAL_DMA_IRQHandler+0x156>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_DMA_IRQHandler+0x200>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00a      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x150>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a31      	ldr	r2, [pc, #196]	; (8001b98 <HAL_DMA_IRQHandler+0x204>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d102      	bne.n	8001ade <HAL_DMA_IRQHandler+0x14a>
 8001ad8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001adc:	e00e      	b.n	8001afc <HAL_DMA_IRQHandler+0x168>
 8001ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae2:	e00b      	b.n	8001afc <HAL_DMA_IRQHandler+0x168>
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	e008      	b.n	8001afc <HAL_DMA_IRQHandler+0x168>
 8001aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aee:	e005      	b.n	8001afc <HAL_DMA_IRQHandler+0x168>
 8001af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af4:	e002      	b.n	8001afc <HAL_DMA_IRQHandler+0x168>
 8001af6:	2320      	movs	r3, #32
 8001af8:	e000      	b.n	8001afc <HAL_DMA_IRQHandler+0x168>
 8001afa:	2302      	movs	r3, #2
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_DMA_IRQHandler+0x208>)
 8001afe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d034      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b18:	e02f      	b.n	8001b7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2208      	movs	r2, #8
 8001b20:	409a      	lsls	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d028      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x1e8>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 020e 	bic.w	r2, r2, #14
 8001b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
    }
  }
  return;
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
}
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020008 	.word	0x40020008
 8001b88:	4002001c 	.word	0x4002001c
 8001b8c:	40020030 	.word	0x40020030
 8001b90:	40020044 	.word	0x40020044
 8001b94:	40020058 	.word	0x40020058
 8001b98:	4002006c 	.word	0x4002006c
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d108      	bne.n	8001be0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bde:	e007      	b.n	8001bf0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e169      	b.n	8001ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8158 	bne.w	8001ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a9a      	ldr	r2, [pc, #616]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a98      	ldr	r2, [pc, #608]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d875      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c3e:	4a98      	ldr	r2, [pc, #608]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d058      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c44:	4a96      	ldr	r2, [pc, #600]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d86f      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c4a:	4a96      	ldr	r2, [pc, #600]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d052      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c50:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d869      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c56:	4a94      	ldr	r2, [pc, #592]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d863      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c62:	4a92      	ldr	r2, [pc, #584]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d046      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c68:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d85d      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_GPIO_Init+0xcc>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d859      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_GPIO_Init+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ce3 	.word	0x08001ce3
 8001c88:	08001d25 	.word	0x08001d25
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d2b 	.word	0x08001d2b
 8001c94:	08001d2b 	.word	0x08001d2b
 8001c98:	08001d2b 	.word	0x08001d2b
 8001c9c:	08001d2b 	.word	0x08001d2b
 8001ca0:	08001d2b 	.word	0x08001d2b
 8001ca4:	08001d2b 	.word	0x08001d2b
 8001ca8:	08001d2b 	.word	0x08001d2b
 8001cac:	08001d2b 	.word	0x08001d2b
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d2b 	.word	0x08001d2b
 8001cb8:	08001d2b 	.word	0x08001d2b
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001cd9 	.word	0x08001cd9
 8001cc4:	08001ced 	.word	0x08001ced
 8001cc8:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_GPIO_Init+0x2b4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cce:	e02c      	b.n	8001d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e029      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e024      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e01f      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e01a      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e013      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	611a      	str	r2, [r3, #16]
          break;
 8001d16:	e009      	b.n	8001d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	615a      	str	r2, [r3, #20]
          break;
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          break;
 8001d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d801      	bhi.n	8001d36 <HAL_GPIO_Init+0x13a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_Init+0x13e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d802      	bhi.n	8001d48 <HAL_GPIO_Init+0x14c>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x152>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	210f      	movs	r1, #15
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80b1 	beq.w	8001ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d94:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1ec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1e8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1e4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	492f      	ldr	r1, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	492c      	ldr	r1, [pc, #176]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4928      	ldr	r1, [pc, #160]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	491e      	ldr	r1, [pc, #120]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4918      	ldr	r1, [pc, #96]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4914      	ldr	r1, [pc, #80]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d021      	beq.n	8001ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e021      	b.n	8001ede <HAL_GPIO_Init+0x2e2>
 8001e9a:	bf00      	nop
 8001e9c:	10320000 	.word	0x10320000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10220000 	.word	0x10220000
 8001ea8:	10210000 	.word	0x10210000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae8e 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	; 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f42:	787b      	ldrb	r3, [r7, #1]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f48:	887a      	ldrh	r2, [r7, #2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f4e:	e003      	b.n	8001f58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	041a      	lsls	r2, r3, #16
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f74:	887a      	ldrh	r2, [r7, #2]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	400b      	ands	r3, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fa4c 	bl	8000450 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e12b      	b.n	800222e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff f83e 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002028:	f001 f844 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 800202c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a81      	ldr	r2, [pc, #516]	; (8002238 <HAL_I2C_Init+0x274>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d807      	bhi.n	8002048 <HAL_I2C_Init+0x84>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a80      	ldr	r2, [pc, #512]	; (800223c <HAL_I2C_Init+0x278>)
 800203c:	4293      	cmp	r3, r2
 800203e:	bf94      	ite	ls
 8002040:	2301      	movls	r3, #1
 8002042:	2300      	movhi	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e006      	b.n	8002056 <HAL_I2C_Init+0x92>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a7d      	ldr	r2, [pc, #500]	; (8002240 <HAL_I2C_Init+0x27c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	bf94      	ite	ls
 8002050:	2301      	movls	r3, #1
 8002052:	2300      	movhi	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0e7      	b.n	800222e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a78      	ldr	r2, [pc, #480]	; (8002244 <HAL_I2C_Init+0x280>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9b      	lsrs	r3, r3, #18
 8002068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a6a      	ldr	r2, [pc, #424]	; (8002238 <HAL_I2C_Init+0x274>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d802      	bhi.n	8002098 <HAL_I2C_Init+0xd4>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	e009      	b.n	80020ac <HAL_I2C_Init+0xe8>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	4a69      	ldr	r2, [pc, #420]	; (8002248 <HAL_I2C_Init+0x284>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	3301      	adds	r3, #1
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	495c      	ldr	r1, [pc, #368]	; (8002238 <HAL_I2C_Init+0x274>)
 80020c8:	428b      	cmp	r3, r1
 80020ca:	d819      	bhi.n	8002100 <HAL_I2C_Init+0x13c>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e59      	subs	r1, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020e0:	400b      	ands	r3, r1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_I2C_Init+0x138>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e59      	subs	r1, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fa:	e051      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e04f      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d111      	bne.n	800212c <HAL_I2C_Init+0x168>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	440b      	add	r3, r1
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e012      	b.n	8002152 <HAL_I2C_Init+0x18e>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	0099      	lsls	r1, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Init+0x196>
 8002156:	2301      	movs	r3, #1
 8002158:	e022      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10e      	bne.n	8002180 <HAL_I2C_Init+0x1bc>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e58      	subs	r0, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	fbb0 f3f3 	udiv	r3, r0, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217e:	e00f      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e58      	subs	r0, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	0099      	lsls	r1, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6809      	ldr	r1, [r1, #0]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6911      	ldr	r1, [r2, #16]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68d2      	ldr	r2, [r2, #12]
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	000186a0 	.word	0x000186a0
 800223c:	001e847f 	.word	0x001e847f
 8002240:	003d08ff 	.word	0x003d08ff
 8002244:	431bde83 	.word	0x431bde83
 8002248:	10624dd3 	.word	0x10624dd3

0800224c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	817b      	strh	r3, [r7, #10]
 800225e:	460b      	mov	r3, r1
 8002260:	813b      	strh	r3, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002266:	f7ff f927 	bl	80014b8 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b20      	cmp	r3, #32
 8002276:	f040 80d9 	bne.w	800242c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2319      	movs	r3, #25
 8002280:	2201      	movs	r2, #1
 8002282:	496d      	ldr	r1, [pc, #436]	; (8002438 <HAL_I2C_Mem_Write+0x1ec>)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f971 	bl	800256c <I2C_WaitOnFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002290:	2302      	movs	r3, #2
 8002292:	e0cc      	b.n	800242e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Mem_Write+0x56>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0c5      	b.n	800242e <HAL_I2C_Mem_Write+0x1e2>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d007      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2221      	movs	r2, #33	; 0x21
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a3a      	ldr	r2, [r7, #32]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a4d      	ldr	r2, [pc, #308]	; (800243c <HAL_I2C_Mem_Write+0x1f0>)
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800230a:	88f8      	ldrh	r0, [r7, #6]
 800230c:	893a      	ldrh	r2, [r7, #8]
 800230e:	8979      	ldrh	r1, [r7, #10]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4603      	mov	r3, r0
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f890 	bl	8002440 <I2C_RequestMemoryWrite>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d052      	beq.n	80023cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e081      	b.n	800242e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fa36 	bl	80027a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b04      	cmp	r3, #4
 8002340:	d107      	bne.n	8002352 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06b      	b.n	800242e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d11b      	bne.n	80023cc <HAL_I2C_Mem_Write+0x180>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1aa      	bne.n	800232a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fa29 	bl	8002830 <I2C_WaitOnBTFFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d107      	bne.n	80023fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e016      	b.n	800242e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	00100002 	.word	0x00100002
 800243c:	ffff0000 	.word	0xffff0000

08002440 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2200      	movs	r2, #0
 8002472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f878 	bl	800256c <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d103      	bne.n	800249a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e05f      	b.n	800255e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	492d      	ldr	r1, [pc, #180]	; (8002568 <I2C_RequestMemoryWrite+0x128>)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f8d3 	bl	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e04c      	b.n	800255e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f95e 	bl	80027a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d107      	bne.n	8002502 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e02b      	b.n	800255e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e021      	b.n	800255c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002518:	893b      	ldrh	r3, [r7, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	6a39      	ldr	r1, [r7, #32]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f938 	bl	80027a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b04      	cmp	r3, #4
 800253c:	d107      	bne.n	800254e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e005      	b.n	800255e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002552:	893b      	ldrh	r3, [r7, #8]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	00010002 	.word	0x00010002

0800256c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257c:	e048      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d044      	beq.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002586:	f7fe ff97 	bl	80014b8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d302      	bcc.n	800259c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d139      	bne.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10d      	bne.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	e00c      	b.n	80025dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d116      	bne.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e023      	b.n	8002658 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10d      	bne.n	8002636 <I2C_WaitOnFlagUntilTimeout+0xca>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	43da      	mvns	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	e00c      	b.n	8002650 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	43da      	mvns	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4013      	ands	r3, r2
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	429a      	cmp	r2, r3
 8002654:	d093      	beq.n	800257e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800266e:	e071      	b.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d123      	bne.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f043 0204 	orr.w	r2, r3, #4
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e067      	b.n	8002798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d041      	beq.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d0:	f7fe fef2 	bl	80014b8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d302      	bcc.n	80026e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d136      	bne.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10c      	bne.n	800270a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	e00b      	b.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	43da      	mvns	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e021      	b.n	8002798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10c      	bne.n	8002778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e00b      	b.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4013      	ands	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f af6d 	bne.w	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027ac:	e034      	b.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f886 	bl	80028c0 <I2C_IsAcknowledgeFailed>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e034      	b.n	8002828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d028      	beq.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c6:	f7fe fe77 	bl	80014b8 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d302      	bcc.n	80027dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11d      	bne.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d016      	beq.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e007      	b.n	8002828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d1c3      	bne.n	80027ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800283c:	e034      	b.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f83e 	bl	80028c0 <I2C_IsAcknowledgeFailed>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e034      	b.n	80028b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d028      	beq.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fe2f 	bl	80014b8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11d      	bne.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d016      	beq.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e007      	b.n	80028b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d1c3      	bne.n	800283e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d11b      	bne.n	8002910 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e272      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293c:	4b92      	ldr	r3, [pc, #584]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00c      	beq.n	8002962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002948:	4b8f      	ldr	r3, [pc, #572]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d112      	bne.n	800297a <HAL_RCC_OscConfig+0x5e>
 8002954:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002962:	4b89      	ldr	r3, [pc, #548]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d06c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x12c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d168      	bne.n	8002a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e24c      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x76>
 8002984:	4b80      	ldr	r3, [pc, #512]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7f      	ldr	r2, [pc, #508]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e02e      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x98>
 800299a:	4b7b      	ldr	r3, [pc, #492]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7a      	ldr	r2, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b78      	ldr	r3, [pc, #480]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a77      	ldr	r2, [pc, #476]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0xbc>
 80029be:	4b72      	ldr	r3, [pc, #456]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a71      	ldr	r2, [pc, #452]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6e      	ldr	r2, [pc, #440]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 80029d8:	4b6b      	ldr	r3, [pc, #428]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fd5e 	bl	80014b8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fd5a 	bl	80014b8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e200      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xe4>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd4a 	bl	80014b8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fd46 	bl	80014b8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1ec      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x10c>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a56:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a62:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x18c>
 8002a6e:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x176>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c0      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4939      	ldr	r1, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x270>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fcff 	bl	80014b8 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fcfb 	bl	80014b8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a1      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4927      	ldr	r1, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <HAL_RCC_OscConfig+0x270>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fcde 	bl	80014b8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fcda 	bl	80014b8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e180      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03a      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d019      	beq.n	8002b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_RCC_OscConfig+0x274>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7fe fcbe 	bl	80014b8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fcba 	bl	80014b8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e160      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f000 fabc 	bl	80030dc <RCC_Delay>
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fca4 	bl	80014b8 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b72:	e00f      	b.n	8002b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fca0 	bl	80014b8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e146      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	42420000 	.word	0x42420000
 8002b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e9      	bne.n	8002b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a6 	beq.w	8002cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a87      	ldr	r2, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	61d3      	str	r3, [r2, #28]
 8002bca:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b82      	ldr	r3, [pc, #520]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7e      	ldr	r2, [pc, #504]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fc61 	bl	80014b8 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7fe fc5d 	bl	80014b8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e103      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x312>
 8002c20:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	e02d      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x334>
 8002c36:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a69      	ldr	r2, [pc, #420]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a66      	ldr	r2, [pc, #408]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	e01c      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCC_OscConfig+0x356>
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a60      	ldr	r2, [pc, #384]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a5d      	ldr	r2, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e00b      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c72:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a5a      	ldr	r2, [pc, #360]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a57      	ldr	r2, [pc, #348]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d015      	beq.n	8002cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fc11 	bl	80014b8 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fc0d 	bl	80014b8 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0b1      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCC_OscConfig+0x37e>
 8002cbc:	e014      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fbfb 	bl	80014b8 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fbf7 	bl	80014b8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e09b      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d061      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d146      	bne.n	8002da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fbcb 	bl	80014b8 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe fbc7 	bl	80014b8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e06d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4921      	ldr	r1, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a19      	ldr	r1, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	430b      	orrs	r3, r1
 8002d72:	491b      	ldr	r1, [pc, #108]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fb9b 	bl	80014b8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe fb97 	bl	80014b8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x46a>
 8002da4:	e035      	b.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fb84 	bl	80014b8 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe fb80 	bl	80014b8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e026      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x498>
 8002dd2:	e01e      	b.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e019      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x500>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4965      	ldr	r1, [pc, #404]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e073      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4936      	ldr	r1, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f10:	f7fe fad2 	bl	80014b8 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe face 	bl	80014b8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e053      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d210      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1cc>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fa30 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	0800f0e0 	.word	0x0800f0e0
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	20000014 	.word	0x20000014

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCC_GetSysClockFreq+0x94>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x30>
 800301e:	2b08      	cmp	r3, #8
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x36>
 8003022:	e027      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003026:	613b      	str	r3, [r7, #16]
      break;
 8003028:	e027      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	0c9b      	lsrs	r3, r3, #18
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_GetSysClockFreq+0x94>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0c5b      	lsrs	r3, r3, #17
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_RCC_GetSysClockFreq+0xa0>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003056:	fb03 f202 	mul.w	r2, r3, r2
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e004      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	613b      	str	r3, [r7, #16]
      break;
 8003072:	e002      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003076:	613b      	str	r3, [r7, #16]
      break;
 8003078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307a:	693b      	ldr	r3, [r7, #16]
}
 800307c:	4618      	mov	r0, r3
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	00b71b00 	.word	0x00b71b00
 8003090:	0800f0f8 	.word	0x0800f0f8
 8003094:	0800f108 	.word	0x0800f108
 8003098:	003d0900 	.word	0x003d0900
 800309c:	007a1200 	.word	0x007a1200

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	20000010 	.word	0x20000010

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b8:	f7ff fff2 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	0800f0f0 	.word	0x0800f0f0

080030dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <RCC_Delay+0x34>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <RCC_Delay+0x38>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a5b      	lsrs	r3, r3, #9
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030f8:	bf00      	nop
  }
  while (Delay --);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	60fa      	str	r2, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <RCC_Delay+0x1c>
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20000010 	.word	0x20000010
 8003114:	10624dd3 	.word	0x10624dd3

08003118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e041      	b.n	80031ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f800 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fcb6 	bl	8003ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_TIM_Base_Start+0x88>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_TIM_Base_Start+0x48>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d009      	beq.n	8003200 <HAL_TIM_Base_Start+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_TIM_Base_Start+0x8c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_TIM_Base_Start+0x48>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <HAL_TIM_Base_Start+0x90>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d111      	bne.n	8003224 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d010      	beq.n	8003234 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003222:	e007      	b.n	8003234 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800

0800324c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	f241 1311 	movw	r3, #4369	; 0x1111
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <HAL_TIM_Base_Stop+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	f240 4344 	movw	r3, #1092	; 0x444
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_TIM_Base_Stop+0x38>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e03a      	b.n	8003326 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_TIM_Base_Start_IT+0x98>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x58>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x58>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_TIM_Base_Start_IT+0x9c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x58>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_TIM_Base_Start_IT+0xa0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d010      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	e007      	b.n	8003324 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800

0800333c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a1a      	ldr	r2, [r3, #32]
 800335a:	f241 1311 	movw	r3, #4369	; 0x1111
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10f      	bne.n	8003384 <HAL_TIM_Base_Stop_IT+0x48>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a1a      	ldr	r2, [r3, #32]
 800336a:	f240 4344 	movw	r3, #1092	; 0x444
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_TIM_Base_Stop_IT+0x48>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e041      	b.n	800342e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f839 	bl	8003436 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 fb76 	bl	8003ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_TIM_PWM_Start+0x24>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e022      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b04      	cmp	r3, #4
 8003470:	d109      	bne.n	8003486 <HAL_TIM_PWM_Start+0x3e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	e015      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d109      	bne.n	80034a0 <HAL_TIM_PWM_Start+0x58>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e008      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e05e      	b.n	8003578 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_TIM_PWM_Start+0x82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	e013      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Start+0x92>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e8:	e003      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	6839      	ldr	r1, [r7, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fd70 	bl	8003fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_TIM_PWM_Start+0x138>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d107      	bne.n	800351a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_PWM_Start+0x138>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIM_PWM_Start+0xfa>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d009      	beq.n	8003542 <HAL_TIM_PWM_Start+0xfa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_PWM_Start+0x13c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIM_PWM_Start+0xfa>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_TIM_PWM_Start+0x140>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d111      	bne.n	8003566 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d010      	beq.n	8003576 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	e007      	b.n	8003576 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d020      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01b      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0202 	mvn.w	r2, #2
 80035c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fa5a 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa4d 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa5c 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0204 	mvn.w	r2, #4
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2202      	movs	r2, #2
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa34 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa27 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa36 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0208 	mvn.w	r2, #8
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2204      	movs	r2, #4
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa0e 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa01 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fa10 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d020      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01b      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2208      	movs	r2, #8
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9e8 	bl	8003a90 <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f9db 	bl	8003a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f9ea 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0201 	mvn.w	r2, #1
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fc fe7c 	bl	80003f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fced 	bl	80040f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9ba 	bl	8003ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0220 	mvn.w	r2, #32
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fcc0 	bl	80040e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003786:	2302      	movs	r3, #2
 8003788:	e0ae      	b.n	80038e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	f200 809f 	bhi.w	80038d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037d5 	.word	0x080037d5
 80037a4:	080038d9 	.word	0x080038d9
 80037a8:	080038d9 	.word	0x080038d9
 80037ac:	080038d9 	.word	0x080038d9
 80037b0:	08003815 	.word	0x08003815
 80037b4:	080038d9 	.word	0x080038d9
 80037b8:	080038d9 	.word	0x080038d9
 80037bc:	080038d9 	.word	0x080038d9
 80037c0:	08003857 	.word	0x08003857
 80037c4:	080038d9 	.word	0x080038d9
 80037c8:	080038d9 	.word	0x080038d9
 80037cc:	080038d9 	.word	0x080038d9
 80037d0:	08003897 	.word	0x08003897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f9e2 	bl	8003ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]
      break;
 8003812:	e064      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fa28 	bl	8003c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
      break;
 8003854:	e043      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fa71 	bl	8003d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0208 	orr.w	r2, r2, #8
 8003870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0204 	bic.w	r2, r2, #4
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
      break;
 8003894:	e023      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fabb 	bl	8003e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69d9      	ldr	r1, [r3, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	021a      	lsls	r2, r3, #8
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	61da      	str	r2, [r3, #28]
      break;
 80038d6:	e002      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIM_ConfigClockSource+0x1c>
 8003908:	2302      	movs	r3, #2
 800390a:	e0b4      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x186>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800392a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d03e      	beq.n	80039c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	f200 8087 	bhi.w	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	f000 8086 	beq.w	8003a62 <HAL_TIM_ConfigClockSource+0x172>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d87f      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b70      	cmp	r3, #112	; 0x70
 800395e:	d01a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0xa6>
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	d87b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d050      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x11a>
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d877      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b50      	cmp	r3, #80	; 0x50
 800396e:	d03c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xfa>
 8003970:	2b50      	cmp	r3, #80	; 0x50
 8003972:	d873      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d058      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x13a>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d86f      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b30      	cmp	r3, #48	; 0x30
 800397e:	d064      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b30      	cmp	r3, #48	; 0x30
 8003982:	d86b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b20      	cmp	r3, #32
 8003986:	d060      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b20      	cmp	r3, #32
 800398a:	d867      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d05c      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b10      	cmp	r3, #16
 8003992:	d05a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	e062      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a6:	f000 fafc 	bl	8003fa2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	609a      	str	r2, [r3, #8]
      break;
 80039c2:	e04f      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d4:	f000 fae5 	bl	8003fa2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e6:	609a      	str	r2, [r3, #8]
      break;
 80039e8:	e03c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 fa5c 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2150      	movs	r1, #80	; 0x50
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fab3 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003a08:	e02c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a16:	461a      	mov	r2, r3
 8003a18:	f000 fa7a 	bl	8003f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2160      	movs	r1, #96	; 0x60
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 faa3 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003a28:	e01c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	461a      	mov	r2, r3
 8003a38:	f000 fa3c 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa93 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003a48:	e00c      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f000 fa8a 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003a5a:	e003      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a60:	e000      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
	...

08003ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <TIM_Base_SetConfig+0xd0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00b      	beq.n	8003af8 <TIM_Base_SetConfig+0x30>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae6:	d007      	beq.n	8003af8 <TIM_Base_SetConfig+0x30>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <TIM_Base_SetConfig+0xd4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_Base_SetConfig+0x30>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <TIM_Base_SetConfig+0xd8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <TIM_Base_SetConfig+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <TIM_Base_SetConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d007      	beq.n	8003b2a <TIM_Base_SetConfig+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <TIM_Base_SetConfig+0xd4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_Base_SetConfig+0x62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <TIM_Base_SetConfig+0xd8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d108      	bne.n	8003b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <TIM_Base_SetConfig+0xd0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d103      	bne.n	8003b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 0201 	bic.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 0302 	bic.w	r3, r3, #2
 8003bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <TIM_OC1_SetConfig+0xc8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10c      	bne.n	8003c1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0308 	bic.w	r3, r3, #8
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <TIM_OC1_SetConfig+0xc8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d111      	bne.n	8003c46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40012c00 	.word	0x40012c00

08003c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f023 0210 	bic.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0320 	bic.w	r3, r3, #32
 8003cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <TIM_OC2_SetConfig+0xd0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10d      	bne.n	8003cec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <TIM_OC2_SetConfig+0xd0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d113      	bne.n	8003d1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00

08003d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <TIM_OC3_SetConfig+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10d      	bne.n	8003dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <TIM_OC3_SetConfig+0xd0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d113      	bne.n	8003dee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40012c00 	.word	0x40012c00

08003e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <TIM_OC4_SetConfig+0x98>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d109      	bne.n	8003e8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 030a 	bic.w	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0210 	bic.w	r2, r3, #16
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	031b      	lsls	r3, r3, #12
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f043 0307 	orr.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	021a      	lsls	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	609a      	str	r2, [r3, #8]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800403c:	2302      	movs	r3, #2
 800403e:	e046      	b.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d009      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10c      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800

080040e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <memset>:
 8004108:	4603      	mov	r3, r0
 800410a:	4402      	add	r2, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <__libc_init_array>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	2600      	movs	r6, #0
 800411c:	4d0c      	ldr	r5, [pc, #48]	; (8004150 <__libc_init_array+0x38>)
 800411e:	4c0d      	ldr	r4, [pc, #52]	; (8004154 <__libc_init_array+0x3c>)
 8004120:	1b64      	subs	r4, r4, r5
 8004122:	10a4      	asrs	r4, r4, #2
 8004124:	42a6      	cmp	r6, r4
 8004126:	d109      	bne.n	800413c <__libc_init_array+0x24>
 8004128:	f000 f81a 	bl	8004160 <_init>
 800412c:	2600      	movs	r6, #0
 800412e:	4d0a      	ldr	r5, [pc, #40]	; (8004158 <__libc_init_array+0x40>)
 8004130:	4c0a      	ldr	r4, [pc, #40]	; (800415c <__libc_init_array+0x44>)
 8004132:	1b64      	subs	r4, r4, r5
 8004134:	10a4      	asrs	r4, r4, #2
 8004136:	42a6      	cmp	r6, r4
 8004138:	d105      	bne.n	8004146 <__libc_init_array+0x2e>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004140:	4798      	blx	r3
 8004142:	3601      	adds	r6, #1
 8004144:	e7ee      	b.n	8004124 <__libc_init_array+0xc>
 8004146:	f855 3b04 	ldr.w	r3, [r5], #4
 800414a:	4798      	blx	r3
 800414c:	3601      	adds	r6, #1
 800414e:	e7f2      	b.n	8004136 <__libc_init_array+0x1e>
 8004150:	0800f10c 	.word	0x0800f10c
 8004154:	0800f10c 	.word	0x0800f10c
 8004158:	0800f10c 	.word	0x0800f10c
 800415c:	0800f110 	.word	0x0800f110

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
